Intentar poseer conocimiento, intentar controlar si a la gente se le permite usarlo, o intentar detener a otros de compartirlo, es sabotaje.
%
La Libertad 0 es la libertad para ejecutar el programa como tu quieras.
%
La Libertad 1 es la libertad para estudiar el código fuente del programa y luego modificarlo para hacer que el programa haga lo que tú deseas.
%
La Libertad 2 es la libertad de redistribuir copias exactas cuando lo desees. Es una libertad para ayudar al prójimo.
%
Libertad 3 es la libertad para redistribuir copias de tus versiones modificadas cuando lo desees. Esta es la libertad para contribuir a tu comunidad.
%
El Derecho de Autor no era un problema cuando sólo restringía a las editoriales, pero ahora se ha convertido en una excusa para atacar al público.
%
Existe un fuerte Movimiento por el Software Libre en muchos países latinoamericanos, en India, y en algunas partes de Europa.
%
La gente en los Movimientos Sociales y Ambientales han comprendido los roles que el Software Libre y el Copyleft juegan en un futuro igualitario.
%
El software privativo implica colonización digital. Como cualquier sistema colonial, mantiene a la gente dividida e indefensa: dividida, porque tienen prohibido compartir copias, e indefensa, porque no tienen el código fuente, por lo que no pueden cambiarlo, ni siquiera comprobar qué es realmente. haciendo.
%
Utilizando software de Micro$oft y Appl€, muchas personas han permitido a esas empresas controlar lo que hacen sus computadoras.
%
Window$ tiene no menos de dos puertas traseras. Una de ellas permite a la policía utilizar una memoria USB para tomar el control de cualquier máquina con Window$ y ver datos cifrados.
%
Las características maliciosas son frecuentes en el software propietario porque el desarrollador o propietario tiene el control total. Este poder tienta al desarrollador a hacer cosas maliciosas a los usuarios.
%
El software privativo puede complacerlo cumpliendo algunos de sus deseos informáticos, pero su primera lealtad será siempre hacia el desarrollador.
%
GPLv3 es leal a la comunidad.
%
Brasil vio una campaña llamada "software imposto". El nombre es una broma: significa "software fiscal" y "software impuesto". La campaña critica un programa propietario publicado por el Estado que los ciudadanos deben utilizar para presentar sus declaraciones de impuestos. FSF LA lanzó un programa libre compatible que la gente puede utilizar.
%
Copyleft es un marco legal para publicar obras de autor como libres, que utiliza la ley de derechos de autor para exigir que sigan siendo libres.
%
Una licencia libre es aquella que respeta las cuatro libertades esenciales; una licencia copyleft va más allá y defiende activamente estas libertades para todos los usuarios.
%
Con algunas licencias no libres, un intermediario puede quitarle la libertad al programa. Una versión modificada podría terminar siendo completamente propietaria. Al obtener tu copia, no obtendrás con ella la libertad que es tu justo derecho.
%
Una licencia copyleft dice que usted es libre de redistribuir copias de la obra, con o sin cambios; pero toda la versión que distribuyas debe estar bajo la misma licencia y debes hacer que el código fuente esté disponible.
%
El autor de software debes respetar la libertad de los demás como los demás respetan a la tuya.
%
El Copyleft traduce "prohibido prohibir" al lenguaje legal, y lo hace legalmente vinculante.
%
De las seis licencias Creative Commons, dos son libres (CC-BY y CC-BY-SA); de esos dos, sólo la última sigue el concepto de "prohibido prohibir" y es Copyleft.
%
Cuando las personas copian y redistribuyen un programa, deben incluir una copia de su manual. Al modificar el programa, deberían modificar el manual en concordancia. Para que esto sea legalmente factible, el manual en sí debe ser libre. Y para garantizar que permanezca libre, debe contar con Copyleft.
%
Creative Commons es un proyecto creado en 2001 por un grupo de expertos en derechos digitales (no relacionado con el copyleft, pero parcialmente inspirado en él) y, al igual que el copyleft, ofrece alternativas al copyright.
%
Creative Commons ofrece a los autores/creadores/artistas un conjunto de seis licencias de derechos de autor con las que pueden publicar obras, permitiéndoles compartirlas o reutilizarlas, y especificando a la vez qué derechos se reservan o renuncian.
%
Las licencias Creative Commons se definen por combinaciones de cláusulas: si la obra no puede reutilizarse con fines comerciales (NC), si solo puede reutilizarse sin modificaciones (ND), si la versión reutilizada también debe tener la misma licencia CC (SA); los seis especifican que se atribuya el autor (BY).
%
Dos de las licencias Creative Commons son "libres" en el sentido en que el software libre utiliza el término, y sólo una de las seis (CC-BY-SA) es copyleft.
%
Como las obras educativas y de referencia han de ser libres, estas deberían ser protegidas sólo por licencias libres (que, en el caso de Creative Commons, son CC-BY o CC-SA).
%
A diferencia de las licencias Creative Commons, la licencia GNU FDL también permite incluír en la documentación secciones secundarias que son invariantes.
%
Algunos manuales de software GNU cuentan con una sección invariante que explica las ideas de libertad. Cualquiera puede alterar las partes técnicas de dicha documentación para corresponder a versiones modificadas de programas propios, mas no pueden eliminar la sección que explica que desarrollamos el manual por el bien de la libertad.
%
Para declaraciones de opiniones políticas recomiendo Creative Commons CC-ND. No quisiera permitir que la gente publique versiones modificadas de mis declaraciones sobre mis puntos de vista.
%
El ataque al intercambio digital es un intento de dividir a las personas y dominarlas.
%
Para otro tipo de obras, aquellas que utilizas para hacer un trabajo práctico en tu vida, no basta con ser compartibles. Dichas obras han de ser libres, lo que significa tener las mismas cuatro libertades que definen al Software Libre.
%
Las obras que realizan un trabajo práctico deben ser libres. Estas incluyen al software, recetas, obras educativas, de referencia y muchos otros tipos de obras que se le puedan ocurrir.
%
Las obras que realizan un trabajo práctico deben ser libres, porque a menos que las personas controlen las obras que utilizan para realizar trabajos en su vida, no controlan su vida.
%
Hay formas de apoyar a los artistas sin restringir la libertad de compartir. Solicitar donaciones y vender directamente a los fans ya funciona bien para muchos artistas musicales.
%
Necesitamos luchar por la libertad de compartir, porque las megacorporaciones de derechos de autor que se benefician de dividir al Pueblo jamás cederán voluntariamente su poder.
%
La shell no concede nada sin una órden.
%
Nunca compréis ningún producto con DRM a menos que tengáis acceso personal a los medios para romper el DRM.
%
El éxito de los productos con DRM se basa en la voluntad del Pueblo de desperdiciar su libertad por algún tipo de comodidad o diversión.
%
El software libre disminuye en gran medida el ciclo impulsado por el negocio que presiona a los usuarios a realizar actualizaciones de software que requieren un hardware cada vez más potente.
%
Compraría una computadora nueva en lugar de usar una que me obligue a vivir bajo el control de alguien.
%
Cuando podamos construir nuestro propio hardware a partir de planos, entonces la cuestión de la libertad del software libre se aplicará también al hardware.
%
La ingeniería genética y la ingeniería del software no podrían ser más diferentes.
%
Los ingenieros del software combinan una enorme cantidad de elementos simples bien definidos que actúan directamente para producir el resultado deseado. La ingeniería genética implica trabajar con elementos complejos que nunca fueron diseñados y cuyos efectos sólo se comprenden parcialmente.
%
Existe una estrecha similitud entre la redistribución y modificación del Software Libre, por un lado, y la práctica agrícola tradicional de almacenar y cruzar semillas y animales, por el otro.
%
Considero la propiedad como un sistema que mantenemos porque a menudo es bueno para todos, pero que puede salirse de control y causar daño.
%
GNU es un medio para un fin, y ese fin es la libertad.
%
Defiendo los derechos humanos, la democracia y la reducción de la pobreza. Aplicar estas ideas al software me llevó a las ideas del movimiento del software libre.
%
El software propietario en la mayoría de los casos es producto de una corporación poderosa. Tiende a concentrar la riqueza y consolida el poder de la corporación sobre los usuarios.
%
El Movimiento del Software Libre resulta ser una parte esencial de un movimiento más amplio cuyo fin es derrocar el imperio de las megacorporaciones.
%
Descarga una versión de GNU/Linux y comienza a usarla.
%
Contribuye al Software Libre.
%
Distribuya discos, habla con el Pueblo y ayúdalos a instalar software libre.
%
Encuentra grupos de usuarios de Software Libre en tu zona.
%
Participad de aquellos proyectos que guarden el objetivo hacer que las obras creativas se puedan compartir.
%
Preservad el material educativo o de referencia bajo el éjido de la información pública.
%
Los hackers son una "subcultura" de programadores que surgió a finales de los años 1960.
%
Los hackers eran los primeros geeks, que disfrutaban de una "inteligencia lúdica" con los ordenadores y las redes. Gran parte de lo que se convirtió en Internet y la informática en red moderna se debió a su trabajo.
%
Tanto la formas de interactuar en línea (netiqueta) como la jerga de la red se remontan a los hackers.
%
Intentar poseer conocimiento, intentar controlar si la gente se le permite usarlo, o intentar detener a otros de compartirlo, es sabotaje.
%
La Libertad 0 es la libertad para ejecutar el programa como tu quieras.
%
La Libertad 1 es la libertad para estudiar el código fuente del programa y luego modificarlo para hacer que el programa haga lo que tú deseas.
%
La Libertad 2 es la libertad de redistribuir copias exactas cuando lo desees. Es una libertad para ayudar al prójimo.
%
Libertad 3 es la libertad para redistribuir copias de tus versiones modificadas cuando lo desees. Esta es la liberta para contribuir a tu comunidad.
%
El Derecho de Autor no era un problema cuando sólo restringía a las editoriales, pero ahora se ha convertido en una excusa para atacar al público.
%
Existe un fuerte Movimiento por el Software Libre en muchos países latinoamericanos, en India, y en algunas partes de Europa.
%
La gente en los Movimientos Sociales y Ambientales han comprendido los roles que el Software Libre y el Copyleft juegan en un futuro igualitario.
%
El software privativo implica colonización digital. Como cualquier sistema colonial, mantiene a la gente dividida e indefensa: dividida, porque tienen prohibido compartir copias, e indefensa, porque no tienen el código fuente, por lo que no pueden cambiarlo, ni siquiera comprobar qué es realmente. haciendo.
%
Utilizando software de Micro$oft y Appl€, muchas personas han permitido a esas empresas controlar lo que hacen sus computadoras.
%
Window$ tiene no menos de dos puertas traseras. Una de ellas permite a la policía utilizar una memoria USB para tomar el control de cualquier máquina con Window$ y ver datos cifrados.
%
Las características maliciosas son frecuentes en el software propietario porque el desarrollador o propietario tiene el control total. Este poder tienta al desarrollador a hacer cosas maliciosas a los usuarios.
%
El software privativo puede complacerlo cumpliendo algunos de sus deseos informáticos, pero su primera lealtad será siempre hacia el desarrollador.
%
GPLv3 es leal a la comunidad.
%
Brasil vio una campaña llamada "software imposto". El nombre es una broma: significa "software fiscal" y "software impuesto". La campaña critica un programa propietario publicado por el Estado que los ciudadanos deben utilizar para presentar sus declaraciones de impuestos. FSF LA lanzó un programa libre compatible que la gente puede utilizar.
%
Copyleft es un marco legal para publicar obras de autor como libres, que utiliza la ley de derechos de autor para exigir que sigan siendo libres.
%
Una licencia libre es aquella que respeta las cuatro libertades esenciales; una licencia copyleft va más allá y defiende activamente estas libertades para todos los usuarios.
%
Con algunas licencias no libres, un intermediario puede quitarle la libertad al programa. Una versión modificada podría terminar siendo completamente propietaria. Al obtener tu copia, no obtendrás con ella la libertad que es tu justo derecho.
%
Una licencia copyleft dice que usted es libre de redistribuir copias de la obra, con o sin cambios; pero toda la versión que distribuyas debe estar bajo la misma licencia y debes hacer que el código fuente esté disponible.
%
El autor de software debes respetar la libertad de los demás como los demás respetan a la tuya.
%
El Copyleft traduce "prohibido prohibir" al lenguaje legal, y lo hace legalmente vinculante.
%
De las seis licencias Creative Commons, dos son libres (CC-BY y CC-BY-SA); de esos dos, sólo la última sigue el concepto de "prohibido prohibir" y es Copyleft.
%
Cuando las personas copian y redistribuyen un programa, deben incluir una copia de su manual. Al modificar el programa, deberían modificar el manual en concordancia. Para que esto sea legalmente factible, el manual en sí debe ser libre. Y para garantizar que permanezca libre, debe contar con Copyleft.
%
Creative Commons es un proyecto creado en 2001 por un grupo de expertos en ciberderecho (no relacionado con el copyleft, pero parcialmente inspirado en él) y, al igual que el copyleft, ofrece alternativas al copyright.
%
Creative Commons ofrece a los autores/creadores/artistas un conjunto de seis licencias de derechos de autor con las que pueden publicar obras, permitiéndoles compartirlas o reutilizarlas, y especificando a la vez qué derechos se reservan o renuncian.
%
Las licencias Creative Commons se definen por combinaciones de cláusulas: si la obra no puede reutilizarse con fines comerciales (NC), si solo puede reutilizarse sin modificaciones (ND), si la versión reutilizada también debe tener la misma licencia CC (SA); los seis especifican que se atribuya el autor (BY).
%
Dos de las licencias Creative Commons son "libres" en el sentido en que el software libre utiliza el término, y sólo una de las seis (CC-BY-SA) es copyleft.
%
Como las obras educativas y de referencia han de ser libres, estas deberían ser protegidas sólo por licencias libres (que, en el caso de Creative Commons, son CC-BY o CC-SA).
%
A diferencia de las licencias Creative Commons, la licencia GNU FDL también permite inclu8ir en la documentación secciones secundarias que son invariantes.
%
Algunos manuales de software GNU cuentan con una sección invariante que explica las ideas de libertad. Cualquier puede alterar las partes técnicas de dicha documentación para corresponder a versiones modificadas de programas propios, mas no pueden eliminar la sección que explica que desarrollamos el manual por el bien de la libertad.
%
Para declaraciones de opiniones políticas recomiendo Creative Commons CC-ND. No quisiera permitir que la gente publique versiones modificadas de mis declaraciones sobre mis puntos de vista.
%
El ataque al intercambio digital es un intento de dividir a las personas y dominarlas.
%
Para otro tipo de obras, aquellas que utilizas para hacer un trabajo práctico en tu vida, no basta con ser compartibles. Dichas obras han de ser libres, lo que significa tener las mismas cuatro libertades que definen al Software Libre.
%
Las obras que realizan un trabajo práctico incluyen al software, recetas, bras educativas, de referencia y muchos otros tipos de obras que se le puedan ocurrir. Estas deben ser libres porque a menos que las personas controlen las obras que utilizan para realizar trabajos en su vida, no controlan su vida.
%
Hay formas de apoyar a los artistas sin restringir la libertad de compartir. Solicitar donaciones y vender directamente a los fans ya funciona bien para muchos artistas musicales.
%
Necesitamos luchar por la libertad de compartir, porque las megacorporaciones de derechos de autor que se benefician de dividir al Pueblo jamás cederán voluntariamente su poder.
%
La shell no concede nada sin una órden.
%
Nunca compréis ningún producto con DRM a menos que tengáis acceso personal a los medios para romper el DRM.
%
El éxito de los productos con DRM se basa en la voluntad del Pueblo de desperdiciar su libertad por algún tipo de comodidad o diversión.
%
El software libre disminuye en gran medida el ciclo impulsado por el negocio que presiona a los usuarios a realizar actualizaciones de software que requieren un hardware cada vez más potente.
%
Compraría una computadora nueva en lugar de usar una que me obligue a vivir bajo el control de alguien.
%
Cuando podamos construir nuestro propio hardware a partir de planos, entonces la cuestión de la libertad del software libre se aplicará también al hardware.
%
La ingeniería genética y la ingeniería del software no podrían ser más diferentes.
%
Los ingenieros del software combinan una enorme cantidad de elementos simples bien definidos que actúan directamente para producir el resultado deseado. La ingeniería genética implica trabajar con elementos complejos que nunca fueron diseñados y cuyos efectos sólo se comprenden parcialmente.
%
Existe una estrecha similitud entre la redistribución y modificación del Software Libre, por un lado, y la práctica agrícola tradicional de almacenar y cruzar semillas y animales, por el otro.
%
Considero la propiedad como un sistema que mantenemos porque a menudo es bueno para todos, pero que puede salirse de control y causar daño.
%
GNU es un medio para un fin, y ese fin es la libertad.
%
Defiendo los derechos humanos, la democracia y la reducción de la pobreza. Aplicar estas ideas al software me llevó a las ideas del movimiento del software libre.
%
El software propietario en la mayoría de los casos es producto de una corporación poderosa. Tiende a concentrar la riqueza y consolida el poder de la corporación sobre los usuarios.
%
El Movimiento del Software Libre resulta ser una parte esencial de un movimiento más amplio cuyo fin es derrocar el imperio de las megacorporaciones.
%
Descarga una versión de GNU/Linux y comienza a usarla.
%
Contribuye al Software Libre.
%
Distribuya discos, habla con el Pueblo y ayúdalos a instalar software libre.
%
Encuentra grupos de usuarios de Software Libre en tu zona.
%
Participad de aquellos proyectos que guarden el objetivo hacer que las obras creativas se puedan compartir.
%
Preservad el material educativo o de referencia bajo el éjido de la información pública.
%
Los hackers son una "subcultura" de programadores que surgió a finales de los años 1960.
%
Los hackers eran los primeros geeks, que disfrutaban de una "inteligencia lúdica" con los ordenadores y las redes. Gran parte de lo que se convirtió en Internet y la informática en red moderna se debió a su trabajo.
%
Tanto la formas de interactuar en línea (netiqueta) como la jerga de la red se remontan a los hackers.
%
Cuando se contribuye a un proyecto existente, la versión modificada se debe publicar bajo la misma licencia que la obra original.
%
Es bueno cooperar con quienes mantienen el proyecto, y usar una licencia distinta para las modificaciones suele dificultar la cooperación. Debe hacerlo únicamente cuando exista una razón de peso que lo justifique.
%
Un caso en el que se puede justificar el uso de una licencia distinta es cuando se realizan cambios significativos en una obra que está bajo una licencia sin copyleft. Si la versión que usted ha creado es considerablemente más útil que el original, entonces merece ser licenciada con copyleft.
%
Si por cualquier motivo opta por publicar sus contribuciones bajo una licencia distinta, debe asegurarse de que la licencia original permita el uso del material bajo la licencia que ha elegido.
%
Para ser honesto, indique explícitamente qué partes del trabajo se encuentran bajo qué licencia.
%
Para la mayoría de los programas recomendamos utilizar la versión más reciente de la Licencia Pública General de GNU (GPL). Su copyleft fuerte es apropiado para todo tipo de software, e incluye numerosas protecciones para la libertad de los usuarios.
%
Para permitir la utilización de versiones futuras de la licencia, especifique "versión 3 o cualquier versión posterior". De ese modo su programa será compatible con el código que en el futuro pueda publicarse bajo las siguientes versiones de la GPL.
%
Para la mayoría de los programas pequeños, usar el copyleft no amerita el esfuerzo.
%
Cuando el código fuente de un paquete de software tiene menos de 300 líneas, los beneficios que proporciona el copyleft suelen ser demasiado pequeños para justificar la inconveniencia de asegurarse que una copia de la licencia acompañe siempre al software.
%
La libertad bien vale la inconveniencia.
%
La Licencia Apache 2.0 se trata de una licencia de software débil, laxa, "blanda" (sin copyleft), que contiene cláusulas para evitar que contribuidores y distribuidores sean demandados por violación de patentes.
%
La licencia Apache 2.0 es la mejor de las licencias débiles (blandas). Así que, si por el motivo que sea va a emplear una licencia débil, esta es la que recomendamos.
%
Algunas bibliotecas implementan formatos de datos libres que compiten con formatos de datos restrictivos, como Ogg Vorbis (que compite con MP3) y WebM (que compite con MPEG-4).
%
El éxito de los formatos libres requiere que se permita que muchos programas de aplicaciones privativas enlacen con el código para manejar el formato.
%
Si queremos convencer a los desarrolladores de aplicaciones privativas de que utilicen la biblioteca para el formato libre, tendremos que facilitárselo empleando para la biblioteca una licencia débil, como la Licencia Apache 2.0.
%
Si los desarrolladores ya están utilizando una biblioteca alternativa bien establecida publicada bajo una licencia que no es libre o una licencia blanda, permisiva, entonces recomendamos usar la Licencia Pública General Reducida de GNU (GNU LGPL).
%
Si existe la probabilidad de que otros hagan versiones mejoradas de su programa para ejecutar en servidores sin distribuirlas a nadie más, y si le preocupa que esto ponga en desventaja la versión que usted ha publicado, recomendamos utilizar la Licencia Pública General Affero de GNU (AGPL).
%
Los términos de la licencia AGPL son prácticamente idénticos a los de la GPL; la única diferencia sustancial es que incluye una cláusula adicional para garantizar que las personas que utilizan el software en red puedan obtener el código fuente correspondiente.
%
El requisito de la licencia AGPL no aborda los problemas que se les pueden presentar a los usuarios cuando confían sus tareas informáticas o sus datos a un servidor ajeno.
%
Para tutoriales, manuales de referencia y otros trabajos extensos de documentación recomendamos la Licencia de Documentación Libre de GNU (GFDL).
%
La Licencia de Documentación Libre de GNU (GFDL) es una licencia con copyleft fuerte para trabajos educativos, inicialmente escrita para manuales de software, que incluye cláusulas enfocadas específicamente a problemas comunes que surgen cuando se distribuyen o modifican esos trabajos.
%
Para trabajos de documentación breves y secundarios, como tarjetas de referencia, es mejor usar la Licencia completamente permisiva de GNU, dado que la licencia GFDL difícilmente podría caber en una tarjeta de referencia.
%
Para páginas de manual recomendamos la GFDL si la página es extensa, y la Licencia completamente permisiva de GNU si es corta.
%
Hay documentación que incluye código fuente de software. Por ejemplo, un manual de un lenguaje de programación puede incluir ejemplos que faciliten la comprensión. Se deben incluir dentro del manual bajo los términos de la licencia FDL, y publicarlos bajo otra licencia que resulte apropiada para software.
%
Si está creando estas obras para utilizarlas específicamente con un proyecto de software, generalmente recomendamos que las publique bajo la misma licencia que el software.
%
Emplear la misma licencia que en el software facilitará su cumplimiento a los distribuidores y evitará dudas sobre posibles cuestiones de compatibilidad.
%
Si su obra no se ha creado para utilizarse con un proyecto de software en particular, o si no fuera apropiado utilizar la misma licencia que en el proyecto, entonces únicamente le recomendamos que elija una licencia con copyleft apropiada para su trabajo.
%
La licencia Creative Commons Reconocimiento-CompartirIgual es una licencia con copyleft que puede utilizarse para varios tipos diferentes de obras.
%
Nadie debe resultar restringido en el software que usa.
%
Algunas empresas han creado varios tipos diferentes de dispositivos que ejecutan software GPL y luego han manipulado el hardware para poder cambiar el software que se está ejecutando, pero impidiéndole que usted lo haga.
%
Si un dispositivo puede ejecutar software arbitrario, es una computadora de uso general y su propietario debe controlar lo que hace.
%
GPLv3 no es una licencia radicalmente nueva; en cambio es una evolución de la versión anterior.
%
Nadie debería poder impedirle escribir el código que desee, y GPLv3 protege este derecho por usted.
%
La GNU GPL no restringe lo que la gente hace en el software; simplemente les impide restringir a otros.
%
El derecho a modificar su software dejará de tener sentido si ninguna de sus computadoras le permite hacerlo.
%
GPLv3 no impide que las personas utilicen la criptografía. Sólo impide que las personas le quiten los derechos que le otorga la licencia, ya sea a través de la ley de patentes, la tecnología o cualquier otro medio.
%
Uno de los requisitos fundamentales de la GPL es que cuando distribuye código objeto a los usuarios, también debe proporcionarles una forma de obtener el código fuente.
%
Cuando aloja código objeto en un servidor web o FTP, simplemente puede proporcionar instrucciones que indiquen a los visitantes cómo obtener también el código fuente de un servidor de terceros.
%
En la Licencia GPLv3, las personas que simplemente descargan o siembran el torrent están exentas de los requisitos de licencia para transmitir el software.
%
Quien inicie el torrent puede proporcionar el código fuente simplemente diciéndole a otros usuarios de torrent dónde está disponible en un servidor de red pública.
%
No es necesario que proporcione la fuente de ciertos componentes principales del sistema operativo, como la biblioteca C.
%
GPLv3 ha ajustado la definición de Biblioteca del sistema para incluir software que puede no venir directamente con el sistema operativo, pero que se puede esperar razonablemente que todos los usuarios del software tengan.
%
GPLv3 ofrece un respiro para el buen comportamiento: si viola la licencia, recuperará sus derechos una vez que detenga la violación, a menos que un titular de los derechos de autor se comunique con usted dentro de los 60 días.
%
El cumplimiento de la GPL siempre ha sido la principal prioridad del FSF Compliance Lab y otros grupos que hacen cumplir la licencia en todo el mundo.
%
Hoy en día cualquier persona puede usar su ordenador en libertad.
%
El Proyecto GNU fue fundado en 1983 por Richard Stallman para desarrollar un sistema operativo libre: el sistema operativo GNU.
%
La libertad del software asume un rol de fundamental importancia en el ámbito educativo.
%
Las instituciones educativas de todos los niveles deben utilizar y enseñar exclusivamente software libre porque es el único que les permite cumplir con sus misiones fundamentales: difundir el conocimiento y enseñar a los estudiantes a ser buenos miembros de su comunidad.
%
El código fuente y los métodos del software libre son parte del conocimiento humano.
%
El software privativo es conocimiento secreto y restringido y, por lo tanto, se opone a la misión de las instituciones educativas.
%
El software libre favorece la enseñanza, mientras el software privativo la prohíbe.
%
El software libre no es simplemente un asunto técnico, es un asunto ético, social y político.
%
Es una cuestión de derechos humanos que los usuarios de software deben tener.
%
La libertad y la cooperación son valores esenciales del software libre.
%
El sistema GNU pone en práctica valores de libertad y cooperación y el principio del compartir, pues compartir es bueno y útil para el progreso de la humanidad.
%
Las tecnologías digitales privativas, que los gigantes de la tecnología usan como instrumentos de vigilancia y maltrato, se han infiltrado en todas las esferas de nuestra vida.
%
La mejor manera de luchar contra este poderoso imperio de las megacorporaciones es dotar a los ciudadanos de la facultad de inspeccionar y tomar el control del software que usan.
%
La misión de las instituciones educativas es contribuir a la mejora de la sociedad. Tienen la responsabilidad de proporcionar al alumnado los medios para ejercer sus derechos en el campo de la computación, y para ello en los centros educativos se debe enseñar e instalar únicamente software libre.
%
No existe en la educación ninguna alternativa legítima al software libre.
%
El software libre no es una mera opción, sino una condición esencial para que las instituciones educativas lleven a cabo su misión social.
%
Profesores, estudiantes, padres, defensores del software libre y miembros de la comunidad en general están actuando para frenar el uso de programas privativos en las escuelas.
%
Los estudiantes se oponen sistemáticamente al software privativo que se recomienda en las escuelas.
%
Las escuelas tienen la responsabilidad moral de proteger a sus estudiantes frente al espionaje, pero si no lo hacen, los alumnos y sus padres deben oponerse y no permitir que eso ocurra.
%
Las escuelas deben rechazar cualquier software privativo
%
La comunidad del software libre ofrece programas de comunicación y videoconferencia que respetan la libertad y la privacidad.
%
La transición hacia la enseñanza a distancia ha traído consigo a un huésped no deseado: el software que no es libre para las clases en línea.
%
Muchas escuelas han adoptado programas de videoconferencia y sistemas de gestión del aprendizaje (LMS) que son software privativo. Las compañías de desarrollo de software utilizan estos programas que no son libres como arma contra los derechos fundamentales de libertad y privacidad de los alumnos y profesores.
%
El software que no es libre es contrario a la educación, ya que prohíbe el intercambio de conocimiento y está diseñado específicamente para impedirlo.
%
En los entornos educativos no se debe dar cabida al software que no es libre.
%
No llamábamos "software libre" a nuestro software porque el término no existía todavía; pero era exactamente eso. Cuando alguien de otra universidad o de otra empresa quería instalar y utilizar un programa, se lo prestábamos de buen grado.
%
Si descubrías a alguien utilizando un programa poco habitual e interesante, siempre podías preguntarle por el código fuente, leerlo, modificarlo o canibalizar partes de él para montar un programa nuevo.
%
El uso de la palabra "hacker" para definir al "que rompe sistemas de seguridad" es una confusión promovida por los medios de masas.
%
Nosotros, los hackers, nos negamos a reconocer esta acepción y seguimos utilizando este término para describir a "alguien que ama la programación y disfruta explorando nuevas posibilidades".
%
Cuando DEC dejó de fabricar la serie PDP-10, su arquitectura elegante y poderosa de los años sesenta no pudo adaptarse de forma natural a los grandes espacios de direccionamiento característicos de los años ochenta.
%
Los modernos ordenadores de los 80s, como el VAX o el 68020, contaban con su propio sistema operativo, pero ninguno utilizaba software libre. Había que firmar un acuerdo de confidencialidad incluso para obtener una copia ejecutable.
%
Los titulares de software propietario establecieron la siguiente norma: "Si compartes con tu vecino, te conviertes en un pirata. Si quieres hacer algún cambio, tendrás que rogárnoslo".
%
La idea de que el sistema social en torno al software propietario -un sistema que te impide compartir o modificar el software-es antisocial, poco ético, sencillamente equivocado, puede sorprender a algunos
%
Lo más fácil hubiera sido subirme al tren del software propietario, firmar acuerdos de confidencialidad y prometer no ayudar a mis compañeros hackers.
%
Decidí estudiar la manera en que un programador podría hacer algo por el bien común. Me pregunté si podía escribir uno o varios programas que permitiesen resucitar nuevamente a nuestra extinta comunidad.
%
La primera cosa necesaria era crear un sistema operativo, el software crucial para empezar a utilizar un ordenador.
%
Con un sistema operativo puedes hacer muchas cosas; sin él, ni siquiera puedes hacer funcionar un ordenador.
%
Mediante un sistema operativo libre podríamos armar una nueva comunidad cooperativa de hackers -e invitar a todos a que se uniesen a ella.
%
Como desarrollador de un sistema operativo, tenía las aptitudes necesarias para desempeñar esta labor.
%
Opté por crear un sistema compatible con Unix para dotarle así de portabilidad y facilitar el cambio a los usuarios de Unix.
%
El nombre de GNU fue elegido según una tradición de los hackers, como un acrónimo recursivo de "GNU’s Not Unix".
%
Un sistema operativo no significa sólo un kernel, que apenas permite ejecutar otros programas.
%
En los años setenta, cualquier sistema operativo decente incluía sus propios procesadores de comandos, ensambladores, compiladores, interpretes, depuradores, editores de textos, gestores de correo y mucho más.
%
Como ateo, no sigo el ejemplo de ningún líder religioso, pero a veces admiro las cosas que han llegado a decir.
%
A veces se malinterpreta el término de "software libre" -para empezar, no tiene ninguna relación con el precio. Lo que nos interesa es la libertad.
%
Libertad 0: La libertad de ejecutar el programa sea cual sea el propósito.
%
Libertad 1: La libertad para modificar el programa para ajustarlo a tus necesidades. (Para que se trate de una libertad efectiva en la práctica, deberás tener acceso al código fuente, dado que sin él la tarea de incorporar cambios en un programa esextremadamente difícil.)
%
Libertad 2: La libertad de redistribuir copias, ya sea de forma gratuita, ya sea a cambio del pago de un precio.
%
Libertad 3: La libertad de distribuir versiones modificadas del programa, de tal forma que la comunidad pueda aprovechar las mejora introducidas.
%
Dado que nos referimos a la libertad y no al precio, no existe contradicción alguna entre la venta de copias y el software libre.
%
Las colecciones de software libre a la venta en formato de CD-ROM son muy importantes para la comunidad y venderlas es una forma de recaudar fondos para el desarrollo de software libre.
%
El desarrollo de un sistema operativo de principio a fin es un proyecto colosal.
%
Desde el inicio, decidí usar TEX como principal procesador de texto, y unos años más tarde me pasé al X Window System en vez de escribir otro sistema de ventanas para GNU.
%
El sistema GNU no consiste en una colección completa de software GNU. El sistema incluye programas desarrollados por otros individuos y para proyectos con sus propios propósitos que empleamos por su condición de software libre.
%
En enero de 1984 abandoné mi empleo en el MIT y comencé a escribir software GNU.
%
Abandonar el MIT era imprescindible si quería que nadie interfiriera en la distribución de GNU como software libre.
%
No tenía ninguna intención de hacer una gran cantidad de trabajo para ver como se convertía en algo inútil en relación a su propósito inicial: crear una nueva comunidad dedicada a compartir software.
%
Decidí que el primer programa para el proyecto GNU sería un compilador capaz de trabajar en múltiples lenguajes y plataformas.
%
Para evitar tener que reescribir todo el compilador, obtuve el código fuente para el compilador Pastel, un compilador multiplataforma desarrollado en Lawrence Livermore Lab.
%
Me di cuenta de que el compilador Pastel analizaba el archivo de entrada en forma de árbol sintáctico, convirtiéndolo en una cadena de "instrucciones" y luego generando todo el archivo de salida sin liberar espacio de almacenamiento.
%
Comencé a trabajar en el GNU Emacs en septiembre de 1984, y a principios de 1985 ya podía ser utilizado. Esto me permitió comenzar a usar el sistema Unix para labores de edición.
%
Dado que nunca me interesó aprender a usar vi o ed, hasta entonces había realizado mis ediciones en otro tipo de máquinas.
%
En aquel momento había gente interesada en utilizar GNU Emacs, lo que planteó el problema de la distribución.
%
El ordenador prep.ai.mit.edu, se convirtió así en el principal sitio FTP de distribución de GNU.
%
Anuncié que enviaría copias de GNU EMACS a cualquiera interesado a cambio de ciento cincuenta dólares. Así comenzó mi empresa de distribución de software libre, precursora de las empresas que hoy distribuyen sistemas Linux basados en GNU.
%
Cuando un programa de software libre deja de estar en manos de su autor, esto no significa necesariamente que siga siendo software libre para cualquiera que se haga con una copia de él.
%
El software de dominio público -software sin copyright-es software libre, pero cualquiera puede modificarlo y hacer una versión propietaria a partir de él.
%
Los desarrolladores del X Window System no lo consideraron un problema -lo esperaban y pretendían que eso ocurriera. Su objetivo no era la libertad sino el "éxito", definido en función del número de usuarios.
%
A muchos programadores no les importa si los usuarios de su programa eran libres o no, bastaba con que fueran muchos.
%
El objetivo de GNU era proporcionar libertad a los usuarios, no simplemente ser popular.
%
Necesitábamos idear unos términos de distribución que impidieran que el software de GNU se convirtiera en software propietario. El método que empleamos se denominó copyleft.
%
Copyleft utiliza la ley de copyright, pero dándole la vuelta para servir a un propósito opuesto al habitual: en lugar de privatizar el software, ayuda a preservarlo como software libre.
%
La idea fundamental del copyleft es que se autoriza la ejecución del programa, su copia, modificación y distribución de versiones modificadas, siempre que no se añada ninguna clase de restricción a posteriori.
%
Las 4 libertades cruciales que definen el "software libre" quedan garantizadas para cualquiera que posea una copia; estas libertades se convierten en derechos inalienables.
%
Para que el copyleft sea efectivo las versiones modificadas deberán ser libres también. Esto garantiza que cualquier tarea basada en nuestro trabajo se pondrá a disposición de la comunidad si llegara a publicarse.
%
El requisito de que los cambios sean libres es esencial para garantizar la libertad de los usuarios del programa.
%
Al combinar un programa libre con un código no libre se plantea un problema similar. Esta combinación acabaría siendo inevitablemente no libre; las libertades suprimidas en la parte no libre del programa afectarán a éste en su totalidad.
%
Nosotros aplicamos una forma específica de copyleft para la mayor parte del software de GNU, conocida como la GNU General Public License o para abreviar GNU GPL.
%
Recurrimos a otros tipos de copyleft según las circunstancias específicas.
%
En 1984 o 1985, Don Hopkins -un compañero con mucha imaginación-me envió una carta. En el sobre había escrito una serie de proverbios, incluido el que sigue: "Copyleft-quedan revocados todos los derechos"
%
Empleé la palabra "copyleft" para bautizar el concepto de distribución que andaba desarrollando en aquel momento.
%
A medida que aumentaba el interés por Emacs, otros vinieron a sumarse al proyecto GNU, y decidimos que era el momento de volver a buscar fuentes de financiación.
%
En 1985 creamos la Free Software Foundation, una organización sin ánimo de lucro dedicada al desarrollo de software libre.
%
La FSF también se hizo con la empresa de distribución de copias de Emacs, a lo que más tarde añadiría otros programas libres-no sólo de GNU-así como la venta de manuales libres.
%
La FSF acepta donaciones, pero la mayor parte de sus ingresos siempre procedió de las ventas de copias de software libre y de otros servicios relacionados con éste.
%
Los empleados de la Free Software Foundation han escrito y se han encargado del mantenimiento de una serie de paquetes de software de GNU.
%
Todos los programas ejecutados en un sistema GNU/Linux utilizan la biblioteca C de GNU para comunicarse con Linux.
%
La shell utilizada en la mayoría de los sistemas GNU/Linux se llama BASH -acrónimo de Bourne Again Shell-, desarrollada por otro empleado de la FSF, Brian Fox.
%
Con el nombre de "Bourne again Shell" pretendíamos mofarnos de la "Bourne Shell", la shell más común en Unix.
%
La filosofía del software libre rechaza una práctica empresarial concreta y muy generalizada, pero no rechaza el negocio en general.
%
Cuando una empresa respeta la libertad de los usuarios, le deseamos mucho éxito.
%
Una serie de empresas asociadas con el término "código abierto" basan su mercado en el software no libre que funciona con software libre.
%
Las empresas que utilizan el término "código abierto" intentan presentarse como empresas de "valor añadido". Si valoramos la libertad, deberíamos hablar de productos de "libertad sustraída".
%
El principal objetivo de GNU era ser software libre.
%
Aun cuando GNU no entrañara ninguna ventaja técnica frente a Unix, sí tendría una ventaja social, al permitir que los usuarios cooperaran, y otra ética, al respetar su libertad.
%
Decidimos no dar soporte a las máquinas de 16 bits -estaba claro que las de 32 bits serían la norma, para cuando hubiéramos terminado el sistema GNU.
%
A medida que iba aumentaba la popularidad del proyecto GNU, la gente empezó a donar ordenadores que operaban con Unix.
%
Unix era -y es- software propietario, y según la filosofía del proyecto GNU no debíamos recurrir a él.
%
Aplicando la misma lógica que nos lleva a justificar el uso de la violencia en legítima defensa, concluí que era igualmente legítimo utilizar un paquete propietario cuando éste resultara crucial para desarrollar un sustituto libre que ayudaría a otros a dejar de utilizar el paquete propietario.
%
Hoy en día ya no tenemos ninguna copia de Unix, porque lo reemplazamos por sistemas operativos libres.
%
Cuando no podíamos sustituir el sistema operativo de un ordenador por otro libre, entonces reemplazábamos el ordenador entero.
%
Cualquier programa que despierte el interés de algo más que un reducido grupo de usuarios se añadirá al sistema operativo GNU.
%
Unix contenía juegos, así que lógicamente GNU tenía que hacer lo propio. Pero la compatibilidad nunca fue un problema para los juegos, de modo que no replicamos los de Unix.
%
En GNU optamos en cambio por una gama de distintas clases de juegos que pensamos podrán gustar a los usuarios.
%
La biblioteca C GNU utiliza un copyleft especial llamado GNU Library General Public License, que autoriza el enlace de software propietario con la biblioteca.
%
La biblioteca C desempeña tareas genéricas; todo sistema o compilador propietario viene acompañado de una biblioteca C.
%
En el sistema GNU -incluido GNU/Linux-, la biblioteca C GNU es la única en C.
%
No existen razones éticas para autorizar la incorporación de aplicaciones propietarias en el sistema GNU, pero estratégicamente parece que prohibir esto desincentivaría el uso del sistema GNU en lugar de alentar el desarrollo de aplicaciones libres.
%
Los desarrolladores de software propietario cuentan con la ventaja que proporciona el dinero; los de software libre deben idear ventajas entre ellos.
%
Todo buen trabajo de software empieza cuando un desarrollador se plantea un reto personal.
%
Muchos componentes esenciales del software GNU se desarrollaron con el fin de crear un sistema operativo libre y completo.
%
El origen de GNU está en una visión y un plan, no en un impulso
individual.
%
Desarrollamos la biblioteca C GNU, la Bourne Again Shell (BASH) y el GNU tar porque cualquier sistema similar a Unix precisaba de estos componentes.
%
Algunos programas GNU se desarrollaron para enfrentarse a amenazas específicas sobre nuestra libertad.
%
Desarrollamos el gzip, para sustituir al programa Compress cuando éste dejó de estar a disposición de la comunidad gracias a las patentes LZW.
%
Estamos desarrollando el GNU Privacy Guard para reemplazar el popular software de encriptación no libre, porque los usuarios no deberían verse obligados a elegir entre su privacidad y su libertad.
%
Al iniciarse el proyecto GNU pensé que desarrollaríamos el sistema en su totalidad y luego lo publicaríamos entero. Pero no fue así.
%
Dado que cada uno de los componentes del sistema GNU se implantó en un sistema Unix, todos ellos podían ejecutarse en sistemas Unix mucho antes de que existiera el sistema GNU.
%
Algunos de los programas GNU se hicieron muy populares y los usuarios empezaron a ampliarlos y a portarlos -a las diversas versiones incompatibles de Unix, y también a otros sistemas.
%
Los desarrolladores de GNU dedicaban la mayor parte de su tiempo al mantenimiento de portes de programas GNU que a escribir los componentes que faltaban.
%
En 1990, el sistema GNU estaba casi terminado. Faltaba crear un solo componente central, el kernel.
%
Decidimos crear un kernel como una colección de procesos de servidor que se ejecutaría sobre Mach. Mach es un microkernel desarrollado en la Universidad Carnegie-Mellon y, más tarde, en la Universidad de Utah.
%
El GNU Hurd es una colección de servidores -o "manada de gnus"-implantados en Mach que desempeñan las diversas tareas propias del kernel de Unix.
%
El desarrollo de GNU Hurd se retrasó mientras esperábamos la publicación de Mach como software libre, tal y como nos habían prometido.
%
Los servidores multiproceso que se envían mensajes entre sí resultan extremadamente difíciles de depurar.
%
La consolidación del Hurd ha llevado muchísimos años.
%
En principio, el kernel GNU no iba a llamarse Hurd. Su nombre original era Alix -por mi novia de aquel momento.
%
En 1991, Linus Torvalds desarrolló un kernel compatible con Unix y lo llamó Linux.
%
En el año 1992, la combinación de Linux con el incompleto sistema GNU resultó en un sistema operativo libre.
%
Gracias a Linux podemos ejecutar hoy una versión del sistema GNU.
%
Denominamos esta versión GNU/Linux para explicar su composición, una combinación del sistema GNU con Linux como kernel.
%
Hemos demostrado ser capaces de desarrollar una amplia gama de software libre.
%
Existen diversos retos que plantean un futuro incierto para el software libre.
%
Necesitaremos la clase de determinación que exhibe la gente cuando valora su libertad y la protege a toda costa.
%
Los fabricantes de hardware tienden cada vez más a mantener en secreto las especificaciones del hardware.
%
Hoy contamos con sistemas libres y completos, pero no durarán mucho si no son compatibles con los ordenadores del mañana.
%
Los programadores pueden hacer ingeniería inversa para descubrir cómo crear programas compatibles con el hardware.
%
A medida que aumente el número de usuarios de software libre, el secretismo de las especificaciones de hardware se convertirá en una política contraproducente.
%
Hacer ingeniería inversa es una labor colosal.
%
La librería no libre que opera en un sistema operativo libre constituye una trampa para los desarrolladores de software libre.
%
Las atractivas funciones de la biblioteca privativa constituyen el cebo perfecto; al utilizar la biblioteca, caes en la trampa, porque tu programa no puede integrarse de forma útil en un sistema operativo libre.
%
Sólo en 1997 el LessTif, desarrollado por los Hungry Programmers, fue lo suficientemente potente para la mayoría de las aplicaciones Motif.
%
Entre 1996 y 1998, otro toolkit no libre de Graphical User Interface (GUI) llamado Qt se incorporó a una notable colección de software libre, el escritorio KDE.
%
GNOME, el GNU Network Object Model Environment, es el proyecto de escritorio de GNU.
%
GNOME pretendía proveer prestaciones similares, pero usando exclusivamente software libre.
%
GNOME entraña algunas ventajas técnicas, como la de ser compatible con varios lenguajes, y no sólo el C++. Pero su principal propósito era la libertad, funcionar sin software no libre.
%
Harmony es una biblioteca sustitutiva compatible, diseñada con el fin de ejecutar software KDE sin recurrir a Qt.
%
La amenaza más seria a la que nos enfrentamos procede de las patentes de software, que pueden introducir algoritmos y funciones fuera del alcance del software libre al menos durante veinte años.
%
Las patentes del algoritmo de compresión LZW se aplicaron en 1983, y todavía no podemos publicar software libre que produzca GIFs adecuadamente comprimidos.
%
En 1998, se suspendió la distribución de un programa libre para reproducir archivos de audio MP3 comprimidos bajo amenaza de una demanda judicial por patente.
%
A pesar de que resulta muy útil discutir la efectividad práctica del modelo de desarrollo de tipo "catedral" y la fiabilidad y potencia de ciertos programas de software libre, debemos ir más allá. Debemos hablar de libertad y de principios.
%
La mayor deficiencia de nuestros sistemas operativos no reside en el software, sino en la ausencia de buenos manuales libres para nuestros sistemas.
%
La documentación es una parte esencial de cualquier paquete de software
%
Un paquete importante de software libre sin un buen manual libre que lo acompañe constituye un lastre considerable.
%
La documentación libre, al igual que el software, es una cuestión de libertad, no de precio.
%
Debe autorizarse la redistribución del manual de un programa libre - incluida la venta comercial, en papel y on line - de modo que el manual pueda acompañar a todas las copias del programa.
%
Por regla general, no creo que la gente deba tener el derecho de modificar toda clase de artículos y libros. Pero existe una razón específica de que la libertad para modificar sea un elemento crucial para la documentación relativa al software libre.
%
Debemos ser capaces de modificar el contenido "técnico" del manual y luego redistribuirlo en los medios y canales habituales; de lo contrario, el manual dejaría de ser útil y necesitaríamos elaborar uno completamente nuevo.
%
Se calcula que existen diez millones de usuarios de sistemas GNU/Linux como Debian GNU/Linux y Red Hat Linux. El software libre ha desarrollado tales ventajas prácticas que está ganando adeptos por razones puramente prácticas.
%
Nuestra capacidad para hacer frente a los desafíos y las amenazas anteriormente descritos dependerá de nuestra voluntad de mantenernos firmes en nombre de la libertad.
%
Nuestros esfuerzos por atraer a nuevos usuarios a nuestra comunidad superan con creces a nuestras iniciativas a la hora de enseñarles los principios de nuestra comunidad.
%
La tarea de enseñar a los nuevos usuarios el valor de la libertad se complicó especialmente en 1998, cuando parte de la comunidad decidió abandonar el término "software libre" y empezó a hablar de "software de código abierto".
%
Quienes proponen el "código abierto" intentaban dejar a un lado los principios que habían impulsado la creación del software libre y el proyecto GNU, procurando así atraer a los ejecutivos y a los usuarios de empresas, quienes comparten mayoritariamente una ideología que antepone las ganancias económicas a la libertad.
%
La retórica del "código abierto" se concentra en la posibilidad de crear un software de alta calidad y capacidad, pero rehuye las nociones de libertad, comunidad y principios.
%
El apoyo de la comunidad empresarial puede contribuir al bien de la comunidad de distintas maneras, siempre que partamos de unas condiciones de igualdad.
%
Los términos "software libre" y "código abierto" describen más o menos la misma categoría de software, pero implican cosas muy distintas acerca del software y sus valores.
%
El Proyecto GNU sigue empleando el término "software libre" para expresar la idea de que la libertad, y no sólo la tecnología, es importante.
%
He realizado mi trabajo siempre ansioso ante la perspectiva de que no tuviera suficiente capacidad para ello, sin saber si mi labor bastaría para alcanzar el objetivo deseado.
%
La visión de un regimiento de hackers manos a la obra constituye una fuente de alivio y de alegría.
%
Con el transcurso de los años los peligros son cada vez mayores, y ahora Microsoft nos tiene en su punto de mira.
%
No podemos pensar que el futuro de la libertad está asegurado. ¡No os engañéis! Si quieres conservar tu libertad, tienes que estar preparado para defenderla.
%
GNU, que significa GNU No es Unix, es el nombre de un sistema de software completamente compatible con Unix que estoy escribiendo para poder regalarlo libremente a quien pueda utilizarlo.
%
GNU será capaz de ejecutar programas de Unix, pero no será idéntico a Unix. Haremos todas las mejoras que sean convenientes y estén basadas en nuestra experiencia con otros sistemas operativos.
%
Considero que la regla de oro requiere que si a mi me gusta un programa, lo debo compartir con otra gente que le guste
%
Los vendedores de software quieren dividir a los usuarios y seducirlos, haciendo que cada usuario acuerde no compartir su software con otros. Yo rehúso a romper mi solidaridad con otros usuarios de esta manera
%
No puedo en buena conciencia firmar un acuerdo de no divulgación o un acuerdo de licencia de software.
%
Para poder continuar usando ordenadores sin vergüenza, he decidido agrupar un cuerpo suficiente de software libre de tal manera que pueda seguir andando sin ninguna clase de software que no sea libre.
%
He dejado el laboratorio de IA para negar al MIT cualquier excusa legal que me prohíba distribuir software GNU.
%
Unix no es mi ideal de sistema, pero no es del todo malo.
%
Las características esenciales de Unix parecen ser buenas y pienso que puedo añadir lo que le falta a Unix sin echarlas a perder.
%
GNU no es de dominio público. Todos tendrán permiso para modificar y redistribuir GNU, pero a ningún distribuidor se le permitirá restringir su redistribución posterior. Es decir, no estarán permitidas modificaciones propietarias.
%
Quiero asegurarme de que todas las versiones de GNU permanezcan libres.
%
He encontrado muchos otros programadores que están entusiasmados con GNU y quieren ayudar.
%
Muchos programadores están descontentos con la comercialización del software de sistema.
%
El acto fundamental de amistad entre programadores es el hecho de compartir programas.
%
Al desarrollar y utilizar GNU en lugar de programas propietarios, nosotros podemos ser hospitalarios con todos y obedecer la ley.
%
GNU sirve como ejemplo de inspiración y como bandera para conminar a otros a unirse a nosotros en el acto de compartir.
%
GNU puede darnos una sensación de armonía que es imposible cuando utilizamos software que no es libre.
%
Estoy pidiendo a los fabricantes de ordenadores que donen equipos y dinero. Estoy pidiendo donativos en forma de programas y trabajo.
%
He encontrado que muchos programadores están ansiosos de contribuir trabajando a tiempo parcial para GNU.
%
Un sistema completo en Unix contiene cientos de utilidades, cada una de las cuales se documenta por separado.
%
Una vez que se haya escrito GNU, todos podremos obtener un buen sistema de software libre, al igual que obtenemos aire.
%
Un usuario que necesite modificar el sistema será siempre libre de hacerlo por sí mismo, o de contratar a cualquier programador o empresa disponible para hacerlo por él.
%
Con el software libre los usuarios no estarán ya a merced de un programador o una empresa que sea dueña del código fuente y que sea la única en posición de realizar modificaciones.
%
Las escuelas podrán proporcionar un ambiente bastante más educativo, animando todos los estudiantes a estudiar y mejorar el código del sistema.
%
En el laboratorio de programación de Harvard solían tener la política de
que ningún programa podía ser instalado en el sistema si su código
fuente no estaba a disposición del público.
%
Copiar por completo o una parte de un programa es tan natural para un programador como respirar y le es igual de productivo.
%
Si la gente prefiriera pagar por GNU y su servicio en vez de obtener GNU libre y sin servicio, una empresa que ofrezca servicio a las personas que obtuvieron GNU libre debiera tener beneficios.
%
Los usuarios que no saben de ordenadores necesitan que se les lleve de la mano: hacer cosas por ellos que ellos mismos podrían hacer fácilmente, pero que no saben cómo hacerlas.
%
Aquellos de nosotros que no necesitemos servicios debemos poder usar el programa sin pagar por el servicio.
%
Si mucha gente obtiene GNU a través de sus amistades y estas empresas no resultan ser un buen negocio, esto demostraría que la publicidad no era realmente necesaria para divulgar GNU.
%
Si tu negocio es vender un sistema operativo, no te gustará GNU, pero ese es tu problema.
%
La creatividad puede considerarse una contribución social, pero sólo si la sociedad es libre de aprovechar sus resultados.
%
No hay nada que objetar en querer un pago por el trabajo, o por buscar maximizar los propios ingresos, siempre y cuando no se utilicen medios que sean destructivos. Pero las formas a las que estamos acostumbrados actualmente en el campo del software se basan en la destrucción.
%
Extraer dinero de los usuarios de un programa mediante la restricción de su uso resulta destructivo porque las restricciones reducen la cantidad y las formas en que el programa puede ser utilizado.
%
Cuando se opta deliberadamente por la restricción, las consecuencias dañinas son la destrucción deliberada.
%
Restringir la copia no es la única forma para hacer negocios con el software. Es la forma más común porque es de la que se obtiene más dinero.
%
El "control sobre el uso de las ideas de uno" realmente constituye control sobre las vidas de otras personas; y normalmente se usa para dificultar más sus vidas.
%
El sistema de patentes fue establecido para animar a los inventores a revelar los detalles de sus inventos. Su propósito fue ayudar a la sociedad y no tan to ayudar a los inventores.
%
La programación tiene una fascinación irresistible para algunas personas, generalmente para las mejores en el ramo.
%
Lo que muestran los hechos es que la gente programa por razones distintas a la de la riqueza; pero si se les da una oportunidad de hacer también mucho dinero.
%
Deberías ser libre de redistribuir copias con o sin modificaciones, de forma gratuita o cobrando por su distribución, a cualquiera y en cualquier lugar. Gozar de esta libertad significa, entre otras cosas, no tener que pedir permiso ni pagar para ello.
%
Deberías ser libre para introducir modificaciones y utilizarlas de forma privada, ya sea en tu trabajo o en tu tiempo libre, sin siquiera tener que mencionar su existencia. Si decidieras publicar estos cambios, no deberías estar obligado a notificárselo a ninguna persona ni de ninguna forma en particular.
%
La libertad para utilizar un programa significa que cualquier individuo u organización podrán ejecutarlo desde cualquier sistema informático, con cualquier fin y sin la obligación de comunicárselo subsiguientemente ni al desarrollador ni a ninguna entidad en concreto.
%
La libertad para redistribuir copias supone incluir las formas binarias o ejecutables del programa y el código fuente tanto de las versiones modificadas como de las originales —la distribución de programas en formato ejecutable es necesaria para su adecuada instalación en sistemas operativos libres.
%
No pasa nada si no se puede producir una forma ejecutable o binaria —dado que no todos los lenguajes pueden soportarlo—, pero todos debemos tener la libertad para redistribuir tales formas si se encuentra el modo de hacerlo.
%
Puedes pagar o no por obtener copias de software libre, pero independientemente de la manera en que las obtengas, siempre tendrás libertad para copiar, modificar e incluso vender estas copias.
%
El software libre no significa que sea "no comercial". Cualquier programa libre estará disponible para su uso, desarrollo y distribución comercial.
%
A veces la normativa gubernamental de control de las exportaciones y las sanciones comerciales pueden constreñir tu libertad para distribuir copias a nivel internacional.
%
Cuando hablamos de software libre, es preferible evitar expresiones como "regalar" o "gratis", porque entonces caeremos en el error de interpretarlo como una mera cuestión de precio y no de libertad.
%
Las tecnologías digitales de la información ayudan al mundo haciendo que sea más fácil copiar y modificar información. Los ordenadores prometen hacer esto de forma más sencilla para todos.
%
Las tecnologías digitales son más flexibles que la imprenta: cuando la información adopta forma digital, puedes copiarla fácilmente para compartirla con otros.
%
Nuestras ideas e intuiciones acerca de la propiedad sobre los objetos materiales tratan acerca de si es justo privarle a alguien de un objeto. No se aplican directamente a hacer copias de algo. Pero los propietarios nos piden que apliquemos estas ideas de todas formas.
%
Copiar no tiene un efecto directo sobre el propietario, y no hace daño a nadie. El propietario sólo puede perder si la persona que hizo la copia hubiese pagado por otra del propietario en su lugar.
%
Los autores a menudo apelan a una conexión especial con los programas que han escrito y añaden que, en consecuencia, sus deseos e intereses respecto al programa simplemente prevalecen sobre los de cualquier otra persona
%
Para los que presentan "el desarrollador es más importante que tú" como un axioma ético, sólo les puedo decir que yo mismo, un notable autor de software, lo considero una tontería.
%
El hecho de que tú ejecutes o modifiques un programa que yo he escrito te afecta a ti directamente y a mí sólo indirectamente. Si tú le das una copia a tu amigo te afecta a ti y a tu amigo mucho más que lo que me afecta a mí. Yo no debería tener el poder de decirte que no hagas estas cosas. Nadie debería.
%
Cuando un programa tiene un propietario, los usuarios pierden la libertad de controlar una parte de sus propias vidas.
%
Cuando los propietarios de software nos dicen que ayudar a nuestro vecino de una manera natural es «piratería», están contaminando el espíritu cívico de nuestra sociedad.
%
Como un usuario de informática de hoy en día, te puedes encontrar usando un programa propietario. Si un amigo te pide hacer una copia, estaría mal negarse a ello.
%
La cooperación es más importante que el copyright.
%
Una persona debería aspirar a vivir una vida honrada abiertamente con orgullo, y esto significa decir "no" al software propietario.
%
Tienes derecho a poder cooperar abierta y libremente con otras personas que usan software.
%
Tienes derecho a poder aprender cómo funciona el software, y a enseñar a tus estudiantes con él.
%
Tienes derecho a poder contratar a tu programador favorito para
arreglarlo cuando un software se rompa.
%
Tienes derecho al software libre.
%
Es importante que la gente conozca el origen del sistema, su historia y
su propósito.
%
El Mundo Libre que se ha desarrollado en torno a GNU/Linux no es un lugar seguro; los problemas que nos llevaron a crear GNU no han sido completamente erradicados y amenazan con volver.
%
Usar el nombre de GNU/Linux es una forma de que la gente lo recuerde e informe a los demás de nuestros objetivos.
%
Es posible escribir buen software libre sin pensar en GNU.
%
Un gran reto para el futuro del software libre es la tendencia de las empresas de distribución de Linux a agregar software no libre a GNU/Linux en nombre de la conveniencia y la potencia.
%
La mayor parte de los desarrolladores de distribución comercial agregan software no libre; ninguno produce una distribución completamente libre.
%
Cuando escriben un programa que depende de un paquete no libre, su software no podrá formar parte de un sistema totalmente libre.
%
Si publicar alternativas libres se redujera a una mera cuestión de programación, resolver los futuros problemas podría ser cada vez más fácil a medida que aumentaran los recursos destinados al desarrollo en nuestra comunidad.
%
No podemos esperar que el mero deseo de un software potente y fiable incite a la gente a emprender grandes esfuerzos de programación.
%
Necesitamos la clase de determinación que la gente tiene cuando lucha por su libertad y su comunidad, determinación para seguir adelante durante años sin rendirse.
%
Algunos distribuidores de software GNU/Linux añaden paquetes
propietarios al sistema básico libre e invitan a los usuarios a
considerar esto como una ventaja, en lugar de un retroceso en la
libertad.
%
Al igual que las ciencias, el software despiertan la codicia en un gran número de gerentes universitarios: consideran los programas como una potencial fuente de ingresos, y no como aportaciones al saber humano.
%
Cuando los gestores comprendan que sus opciones se limitan a tener un paquete de software libre que aportará prestigio a la universidad o nada de nada, por lo general se decantarán por la primera opción.
%
Sea cual sea vuestra postura, siempre conviene mostrar determinación y adoptar una perspectiva ética, tal y como lo hacemos nosotros en el movimiento del software libre.
%
Si deseamos tratar al público éticamente, el software debería ser libre en el sentido de libertad para todos.
%
Nosotros defendemos que quienes redistribuyen software libre cobren cuanto quieran o cuanto puedan por él.
%
Algunas veces los programas libres se distribuyen gratis y otras a cambio de un precio cuantioso.
%
El programa es libre porque los usuarios lo pueden utilizar libremente, sin que importe su precio.
%
Los programas que no son libres se venden frecuentemente a precios altos, pero a veces una tienda te ofrece una copia sin cobrarte. No obstante, eso no lo convierte en software libre.
%
Con o sin precio, el programa no es libre cuando sus usuarios no tienen libertad.
%
Dado que el software libre no es una cuestión de precio, un precio bajo no resulta más libre, ni más próximo a lo libre.
%
Si redistribuyes copias de software libre, también puedes fijar un precio cuantioso para hacer algo de dinero. Redistribuir software es una actividad buena y legítima; si lo haces, también puedes sacar una ganancia por ello.
%
El software libre es un proyecto comunitario y cualquiera que lo integre debería buscar formas de contribuir a la construcción de la comunidad.
%
¡Distribuir software libre es una oportunidad de obtener medios para el desarrollo! ¡No la pierdas!
%
Los monopolistas del ámbito del software intentan como locos que no instales un programa propietario sin pagar el precio de mercado.
%
Con el software libre, los usuarios no tienen que pagar un precio de distribución para utilizar software. Pueden copiar el programa de un amigo que tenga una copia o con la ayuda de un amigo que tenga acceso a la red.
%
Rigurosamente "vender" significa intercambiar bienes por dinero. Vender una copia de un programa libre es legítimo y nosotros lo alentamos.
%
La licencia GPL (General Public License) de GNU no establece requisitos sobre cuánto puedes cobrar por distribuir una copia de software libre.
%
La licencia GPL obliga a proporcionar una copia del código fuente del programa.
%
Al defender la libertad de los usuarios, no nos distraen cuestiones secundarias como cuánto se cobra por una distribución.
%
La libertad es la cuestión, toda la cuestión y la única cuestión.
%
Únietenos y comparte tu software
%
Hackers, serán libres.
%
He llegado a interesarme por el copyright porque no hay forma de evitarlo en el mundo de las redes informáticas.
%
Como usuario de ordenadores y de redes desde hace treinta años, valoro las libertades que hemos perdido y las que podríamos perder.
%
El copyleft es un método para convertir un programa en software libre y exigir que todas las versiones del mismo, modificadas o ampliadas, también lo sean.
%
El copyleft garantiza que cada usuario goce de esta libertad.
%
El copyleft ayuda a programador o a la programadora que deseen contribuir a mejorar el software libre al darles autorización para ello.
%
Para aplicar el copyleft a un programa, primero reservamos los derechos; luego añadimos los términos de distribución, un instrumento legal que otorga a todo el mundo el derecho a utilizar, modificar y redistribuir el código del programa o cualquier programa derivado del mismo, siempre que no se alteren los términos de distribución.
%
La primera vez que tuve la oportunidad de hacer algo en Lisp fue siendo un novato en Harvard, cuando escribí un intérprete de Lisp para el PDP-11.
%
El PDP-11 era una máquina muy pequeña, tenía algo así como 8k de memoria, y me las arreglé para escribir el intérprete en unas mil instrucciones.
%
En la década de los 70, antes de que mi vida se politizara a causa de terribles sucesos, simplemente me dedicaba a hacer una extensión tras otra de varios programas.
%
Lo interesante de Emacs era que no solo incluía un lenguaje de programación, sino que además los comandos de edición de los que disponía el usuario estaban escritos en ese mismo lenguaje, de forma que permitía cargar nuevas instrucciones mientras se estaba editando.
%
Podía modificar los programas que estaba utilizando e, inmediatamente, editar utilizando los programas recién modificados.
%
Teníamos un sistema que resultaba útil para tratar con texto además de programar, y que, sin embargo, permitía al usuario programar el editor mientras lo estaba usando.
%
La construcción de programas complejos y gigantescos para usarlos en las ediciones de textos de uno, y después intercambiarlos con otros, alimentó el espíritu de cooperación espontánea que teníamos entonces en el Laboratorio de Inteligencia Artificial.
%
Compartíamos programas con todo el que deseara usarlos, eran conocimiento humano.
%
A pesar de que no había un pensamiento político organizado que relacionara la forma en que compartíamos software con el diseño de Emacs, estoy convencido de que había una conexión entre ellos, quizá una conexión inconsciente.
%
Creo que fue la naturaleza de la forma de vida que llevábamos en el Laboratorio de Inteligencia Artificial lo que condujo a Emacs e hizo de él lo que fue.
%
TECO era nuestro editor de textos y era un lenguaje de programación extremadamente feo, no podía haber sido más feo. La razón era que no fue diseñado para ser un lenguaje de programación, sino como un lenguaje de órdenes y un editor de textos.
%
El lenguaje sobre el que construye sus extensiones no debería ser considerado como un lenguaje de programación a posteriori, sino que debería ser diseñado como un lenguaje de programación desde un principio.
%
El propósito del proyecto GNU es hacer más fácil para la gente rechazar el software que no sea libre, pisotea libertades y domina usuarios, proporcionándole software libre para sustituirlo.
%
Multics Emacs de Bernie Greenberg fue un gran éxito: programar nuevas órdenes de edición era tan práctico que incluso los administrativos empezaron a aprender a hacerlo en sus oficinas.
%
Para aquellos que no tienen el valor moral de rechazar el software que no es libre cuando hacerlo representa un inconveniente práctico, lo que intentamos hacer es ofrecer una alternativa libre de forma que puedan mudarse a la libertad de forma más ordenada y con menos sacrificios en términos prácticos.
%
Queremos hacer más fácil vivir en libertad, cooperar.
%
Con software libre es libre de cooperar con otros así como libre de ayudarse a usted mismo.
%
Con software que no es libre, alguien le está dominando y está manteniendo dividida a la gente. No se le permite compartir con el resto, no es libre de cooperar ni de ayudar a la sociedad, como tampoco es libre de ayudarse a usted mismo.
%
Divididos y desamparados es como se encuentran los usuarios de software que no es libre.
%
Hemos producido una enorme variedad de software libre.
%
Hemos hecho lo que la gente decía que nunca lograríamos hacer; tenemos dos sistemas operativos de software libre.
%
Tenemos muchas aplicaciones libres y, obviamente, todavía tenemos mucho camino por recorrer. Así que necesitamos su ayuda.
%
Me gustaría pedirles que colaboraran como voluntarios para el proyecto GNU; ayúdennos a desarrollar software libre para más tareas.
%
No hay otro sistema que GNU, y Linux es uno de sus kernels.
%
Si alguien roba un medio de almacenaje que contiene una versión de software licenciada bajo GPL, que ha sido publicada, entonces el ladrón probablemente tiene derecho a hacer copias y redistribuirlas bajo la GPL; pero si es alguien encarcelado por robar, puede que para hacerlo tenga que esperar a que lo dejen en libertad.
%
Si una empresa trató de publicar su versión de software bajo GPL, y la sigue tratando como secreto comercial, esto vulneraría la GPL.
%
Si una empresa distribuye como secreto comercial una copia de alguna obra de otros desarrolladores cubierta por la GPL, esta compañía ha violado la GPL y tendrá que dejar de distribuir ese programa.
%
Si una empresa me proporciona como secreto comercial una copia de una obra suya cubierta por la GPL, si el programa distribuido no incluye ninguna obra ajena cubierta por la GPL, entonces la compañía no está violando la GPL. Pero esa compañía está haciendo dos declaraciones contradictorias acerca de lo que usted puede hacer con el programa: que puede redistribuirlo y que no puede hacerlo. Sería razonable pedir una aclaración de las condiciones de uso de ese programa antes de aceptar una copia.
%
De cuando en cuando, en un intervalo de años, modificamos la GPL: a veces para clarificarla, a veces para autorizar ciertos tipos de uso antes no permitidos, y a veces para hacer más estricto algún requisito.
%
Es un error revocar permisos ya concedidos, a menos que se deba a alguna vulneración. Si su libertad pudiera ser revocada, no sería una auténtica libertad.
%
Si obtiene una copia de una versión de un programa bajo determinada versión de una licencia, siempre debe disfrutar de los derechos que concede dicha versión.
%
La GPL se diseñó para programas; contiene muchas cláusulas complejas que son cruciales para los programas, pero que no tienen ningún sentido para un libro o manual.
%
La licencia GFDL para documentación tiene cláusulas que permiten a los editores de manuales libres obtener un beneficio vendiendo copias: textos de cubierta, por ejemplo. Las reglas especiales para las secciones de Aprobaciones hacen posible utilizar la GFDL para un estándar oficial. Esto permitiría versiones modificadas, pero no podrían ser etiquetadas como «la estándar».
%
Al utilizar la GFDL permitimos cambios en el texto de un manual que trata un asunto técnico. Es importante poder modificar las partes técnicas, pues quien modifica un programa debe modificar también la documentación correspondiente. La libertad de hacer esto es un imperativo ético.
%
Nuestros manuales incluyen también secciones en las que se expone nuestra posición política con respecto al software libre. Las marcamos como "invariables", de modo que no puedan ser modificadas o eliminadas. La GFDL prevé estas "secciones invariables".
%
Las plantillas no son tan relevantes como para que haga falta emplear el copyleft para protegerlas.
%
Normalmente no hay problema en utilizar el copyleft para obras menores, pero las plantillas son un caso especial, ya que se combinan con datos proporcionados por los usuarios de la aplicación y esa combinación se distribuye.
%
Recomendamos que licencie sus plantillas bajo condiciones sencillas y permisivas.
%
Qué programas haya utilizado para editar el código fuente, compilarlo, estudiarlo o grabarlo es habitualmente irrelevante por lo que se refiere a la licencia de dicho código fuente.
%
Si las bibliotecas no se ajustan a la excepción de la GPL relativa a las "bibliotecas del sistema" deberá añadir una nota dando permiso para enlazar su programa con ellas.
%
Sería útil disponer de traducciones de la GPL en lenguas distintas del inglés.
%
Si diéramos nuestra aprobación oficial a una traducción de la GPL estaríamos permitiendo a todo el mundo hacer todo lo que la traducción diga que pueden hacer. Si la traducción es absolutamente precisa, perfecto. Pero si la traducción contiene algún error, los resultados podrían ser desastrosos e irreparables.
%
Puesto que la GPL es una licencia con copyright, los titulares del copyright del software son quienes tienen la facultad de hacer cumplir la GPL.
%
Si observa un incumplimiento de la GPL debe informar a los desarrolladores del software afectado cubierto por la GPL.
%
La GPL no exige a nadie usar Internet para la distribución. Tampoco exige a nadie en particular que redistribuya el programa. Y (aparte de un caso especial), aun cuando alguien decida a veces redistribuir el programa, la GPL no dice que deba facilitarle una copia a usted o a cualquier otra persona en particular.
%
La GPL no anula (ni puede hacerlo) las leyes locales.
%
Por el mero hecho de manifestar su acuerdo con la GPL usted no adquiere compromiso alguno. Para solo usar software con licencia GPL usted no está obligado a manifestar su acuerdo con nada. Contraerá obligaciones únicamente si modifica o distribuye el software.
%
El instalador y los archivos que instala son obras diferentes. Como consecuencia, los términos de la GPL no se aplican al software de instalación.
%
La FSF se opone a que las leyes estadounidenses de control de las exportaciones se apliquen al software libre. Esas leyes no solo son incompatibles con el objetivo general de libertad del software, sino que no sirven a ningún propósito gubernamental razonable, ya que el software libre está en la actualidad y debería siempre estar disponible para gente de casi todos los países, incluidos países sin leyes de control de las exportaciones y que no participan en los embargos comerciales promovidos por EE. UU.
%
Las leyes estadounidenses de control de las exportaciones no hacen que el software libre quede fuera del alcance de ningún gobierno, y los ciudadanos de ningún país deben ser privados del software libre, independientemente de las políticas de sus gobiernos.
%
Facilitamos copias de todo el software con licencia GPL publicado por la FSF, sin necesidad de que se nos den explicaciones del lugar de residencia o del uso que se le pretende dar.
%
No se puede utilizar software cubierto por la GPL en un dispositivo que dejará de funcionar si los clientes no siguen pagando una cuota de suscripción. Como el requisito de continuar pagando una cuota limita la capacidad del usuario de correr el programa, y se trata de n requisito adicional sobre la GPL, la licencia lo prohíbe.
%
Dado que la GPLv2 se escribió antes de que la distribución par-a-par se popularizara, es difícil cumplir con sus requisitos cuando se comparte código por esta vía.
%
La propagación de un trabajo amparado surgida simplemente como consecuencia de la transmisión entre usuarios para obtener una copia tampoco requiere aceptación de la licencia GPL.
%
Algunos dispositivos usan software libre que puede ser actualizado, pero están diseñados de tal manera que los usuarios no puedan modificar ese software.
%
Cuando la gente distribuye Productos de Usuario que incluyen software bajo la GPLv3, la sección 6 exige que le proporcionen la información necesaria para modificar ese software.
%
La GPLv3 puede utilizarse también para licenciar materiales cubiertos por otras leyes similares al copyright; por ejemplo, las máscaras de semiconductores.
%
Cualquier bien material susceptible de quedar cubierto por copyright puede ser licenciado bajo la GPL.
%
En muchas situaciones el copyright no cubre la fabricación material de hardware a partir de un diseño gráfico. En tales situaciones, su licencia del diseño gráfico no ejerce ningún control sobre la manufacturación o la venta del hardware, sea cual fuere la licencia que use.
%
El único caso en que la licencia GPL le exigiría publicar sus claves criptográficas privadas sería si difundiera software en un Producto de Usuario y el hardware analizara el software en busca de una firma criptográfica válida para empezar a funcionar. En tal caso debe proporcionar dicha clave a cualquier poseedor del dispositivo que lo solicite.
%
Los poseedores de un Producto de Usuario licenciado bajo GPLv3, deben poder instalar software modificado en el dispositivo y hacerlo funcionar
%
La GPLv3 no exige que los votantes tengan la posibilidad de modificar el software que opera en una máquina de votación
%
El votante que utiliza una máquina de votación (al igual que cualquier otra cabina) no toma posesión de ella, ni siquiera temporalmente, de manera que el votante no toma posesión del software binario presente en ella.
%
Solo por que el software que opera en una computadora sea libre, eso no quiere decir que puede confiar en la máquina de votar.
%
Las computadoras no son fiables para votar. El voto debería emitirse en
papel.
%
Con voto electrónico es más fácil alterar un millón de votos que uno.
%
Las leyes disponen la facilidad del recuento de votos si la diferencia de totales es pequeña, pero con fraude digital es posible provocar una diferencia lo suficientemente grande que haga dificil producir el recuento de votos según los márgenes de la ley.
%
Finalmente, con el voto electrónico el país estará a merced de quien sea el dueño del sistema.
%
La licencia GPLv3 es icompatible con la GPLv2.
%
Si tratara de combinar código publicado bajo la GPLv2 con código publicado bajo la GPLv3, estaría vulnerando la sección 6 de la GPLv2.
%
Si el código está publicado bajo la "versión 2 o posterior" de la GPL, es compatible con la GPLv3, puesto que la GPLv3 es una de las opciones que admite.
%
GPLv3 exige de forma explícita que en la redistribución se incluya toda la «Información de Instalación» necesaria, mientras que la GPLv2 no utiliza esa expresión, pero exige que en la redistribución se incluyan los scripts utilizados para controlar la compilación e instalación del ejecutable, junto con el correspondiente código fuente completo.
%
A efectos de la GPL, existen dos formas de copia: por propagación, y por difusiión. En la primera se considera a título individual, y la segunda, colectivo.
%
Hemos creado estos nuevos términos para que nuestros propósitos sean lo más claros posibles sea cual sea el lugar en el que se interprete la licencia. La copia por propagación o copia por difusión aclaran estas diferencias funcionales en la licencia GPLv3.
%
Una licencia que impone restricciones sobre quién puede usar el programa, o para qué, no es una licencia de software libre.
%
Soy Richard Stallman. En 1983 lancé el Movimiento del Software Libre.
%
Software Libre quiere decir programa de computadora que respeta la libertal del usuario, y la solidaridad social de su comunidad.
%
Los programas que no son libres son software privativo, es decir, privan de la libertad a sus usuarios, y los mantienen en un estado de división e impotencia.
%
Un programa de computadora privativo mantiene un estado de división entre sus usuarios porque cada uno es prohibido de compartirlo con los demás.
%
Un programa de computadora privativo mantiene un estado de impotencia entre sus usuarios porque éstos no poseen el código fuente del mismo.
%
Los usuarios de un programa de computadora privativo no pueden cambiar nada de él, ni siquiera pueden averiguar que es lo que realmente el programa está haciendo (y puede hacer cosas muy malas).
%
Que un programa sea de Software Libre quiere decir que el usuario tiene las cuatro Libertades del Software escenciales.
%
La Libertad 0 es la libertad de ejecutar el programa como tú quieras.
%
La Libertad 1 es la libertad de estudiar el código fuente del programa y cambiarlo para que haga lo que tú quieras.
%
La libertad 2 es la libertad de ayudar a tu prójimo, es decir, la libertad de hacer y distribuir copias exactas del programa cuando tú quieras.
%
La Libertad 3 es la libertad de contribuir a tu comunidad; es decir, la libertad de hacer y distribuir copias de tus versiones modificadas del programa de computadora.
%
Con estas cuatro libertades, el programa es Software Libre porque el sistema social de su uso y distribución se ha constituído en un un sistema ético, que respeta la libertad individual de cada uno, y respeta la comunidad de los usuarios.
%
Todo software debe ser Libre, porque cada uno merece la libertad.
%
Todo software debe ser libre, porque cada uno merece poder participar en una Comunidad Libre.
%
Las escuelas deben enseñar únicamente el Software Libre.
%
La razón más superficial por las cuales las escuelas deben enseñar software libre es para economizar.
%
Las escuelas no tienen bastante dinero, no deben desperdiciar su dinero pagando permiso para usar software privativo.
%
Algunas empresas que producen software privativo, suelen regalar a las escuelas copias gratuitas o casi gratuitas de su software no libre, y lo hacen para hacer adictos a los alumnos.
%
Que empresas que produzcen software privativo regalen copias de su software no libre es un plan malévolo, que usa las escuelas como instrumento para imponer una dependencia permanente de los alumnos.
%
Si una escuela enseña el uso de un programa privativo, el alumno se gradúa con la dependencia.
%
Tras graduarse, un alumno dependiente de un software privativo regalado a su escuela para su enseñanza, no recibirá más ofertas de copias gratuitas.
%
La empresa para la cual trabaja un alumno dependiente de un software privativo regalado a su escuela para su enseñanza, no recibe copias gratuitas de dicho software.
%
Las empresas que producen software privativo regalan copias del mismo a las escuela para que estas enseñar una dependencia permanente a la sociedad entera.
%
La escuela debe rechazar su participación en el plan malévolo de enseñar software privativo, porque la escuela tiene una misión social, que es educar a la próxima generación como buenos cuidadanos, de una sociedad capaz, fuerte, independiente, solidaria y libre.
%
Sólo se educar la próxima generación de buenos ciudadanos enseñando el software libre.
%
Las escuelas deben borrar software privativo, para instalar sólo software libre.
%
Pero hay otra razón más profunda para la educación misma de los buenos programadores. Porque
%
Para aprender a programar bien, se necesita leer mucho código fuente y escribir mucho código fuente.
%
Para aprender a escribir código para programas grandes, se necesita primero escribir pequeños cambios en el código fuente de programas grandes.
%
Sólo el software libre posibilita aprender a programar bien, pues permite escribir cambios pequeños en el código fuente de los programas grandes.
%
Sólo el software libre permite la educación en la informática.
%
La escuela tiene la misión de enseñar no sólo hechos, no sólo técnicas, sino sobre todo el espíritu de la buena voluntad, y el hábito de ayudar a tu prójimo.
%
Cada clase en la escuela debe tener esta regla: "Alumnos si traes un programa a la clase no puedes guardarlo para tí, debes compartirlo con el resto de la clase".
%
La escuela debe presentar únicamente el Software Libre a la clase.
%
Cada escuela debe migrar al software libre y enseñar Software Libre, pues todas ellas contribuir a dirigir a la sociedad rumbo a la libertad y a la solidaridad social.
%
Debido a un peculiar giro de los acontecimientos, a la versión de GNU ampliamente utilizada hoy en día se la llama a menudo "Linux", y muchos de quienes la usan no se dan cuenta de que básicamente se trata del sistema GNU, desarrollado por el proyecto GNU.
%
Existe un Linux, pero constituye solo una parte del sistema que utilizan.
%
Linux es el núcleo: el programa del sistema que se encarga de asignar los recursos de la máquina a los demás programas que el usuario ejecuta. El núcleo es una parte esencial de un sistema operativo, pero inútil por sí mismo, sólo puede funcionar en el marco de un sistema operativo completo.
%
Linux se utiliza normalmente en combinación con el sistema operativo GNU: el sistema completo es básicamente GNU al que se le ha añadido Linux, es decir, GNU/Linux.
%
Todas las distribuciones denominadas "Linux" son en realidad distribuciones GNU/Linux.
%
Muchos usuarios no entienden la diferencia entre el núcleo, que es Linux, y el sistema completo, al que también llaman "Linux".
%
Muchos usuarios suelen pensar erróneamente que Linus Torvalds, con un poco de ayuda, desarrolló el sistema operativo completo en 1991.
%
Los programadores generalmente saben que Linux es un núcleo, pero como habitualmente han oído llamar "Linux" al sistema completo, con frecuencia imaginan alguna historia que justifique dar al sistema completo el nombre del núcleo.
%
Muchos erróneamente creen que una vez que Linus Torvalds terminó de escribir el núcleo Linux, los usuarios buscaron más software libre para completarlo, y descubrieron que (por ninguna razón en particular) casi todo lo necesario para hacer un sistema operativo similar a Unix ya estaba disponible.
%
El sistema GNU, no está del todo completo.
%
El software libre disponible dio como resultado un sistema completo porque el Proyecto GNU había estado trabajando con ese objetivo desde 1984.
%
Cuando Linus Torvalds inició el desarrollo del núcleo Linux, el sistema GNU ya estaba casi terminado.
%
El objetivo de la mayoría de los proyectos de software libre es desarrollar un programa particular para cubrir una necesidad particular.
%
Linus Torvalds se propuso escribir un kernel de tipo Unix (Linux), Donald Knuth se propuso escribir un editor de textos (TeX), Bob Scheifler se propuso desarrollar un sistema de ventanas (el X Window System).
%
Es natural medir la contribución de los proyectos de software en función de los programas específicos que aportan.
%
Un vendedor de CD-ROM constató que en su «distribución Linux» el software de GNU constituía el mayor contingente, con alrededor del 28% del total del código fuente, y esto incluía algunos de los principales componentes esenciales, sin los cuales no habría sistema.
%
En el repositorio principal de gNewSense, Linux representa el 1,5% y los paquetes de GNU el 15%)
%
Existen distribuciones que ofrecen al usuario la opción de instalar únicamente software libre y que nos abstenemos de recomendar.
%
Un usuario que valore la libertad lo suficiente y que reflexione sobre el tema puede hacer que esas distros respeten su liberdad.
%
No queremos inducir a las personas a instalar software que no es libre; hemos escogido nuestros métodos para que eso sea poco probable.
%
El público en general es un grupo numeroso y vario.
%
Por motivos éticos, un festival de instalación no debe recomendar ni instalar programas que no sean libres.
%
Las fiestas de instalación invitan a los usuarios a llevar sus computadoras para que los expertos les instalen GNU/Linux. La intención es promover las ideas del software libre, como también el uso de programas libres.
%
En las actuales circunstancias, los usuarios que quieran rechazar completamente el software que no es libre tendrán que elegir sus máquinas con mucho cuidado para lograrlo.
%
Las computadoras no funcionan con una distribución GNU/Linux completamente libre; la razón es que contienen periféricos o coprocesadores que no funcionarán a menos que el sistema incluya algunos controladores o firmware privativos.
%
Los fabricantes de hardware se niegan a revelarnos cómo se usan sus productos, de modo que la única forma de descubrirlo es mediante la ingeniería inversa, cosa que en la mayor parte de los casos aún no se ha hecho.
%
Instalando únicamente el software libre que se incluye en las distribuciones 100% libres, las máquinas que son parcialmente secretas no funcionarán del todo.
%
Si instala distribuciones y software que no son libres para que las máquinas funcionen completamente, no logrará enseñar a los usuarios a decir "no" en aras de la libertad.
%
Utilizar software que no es libre implica que el usuario sacrifique su libertad por la funcionalidad.
%
Hago un llamado directamente a las fiestas de instalación de software para que tomen una posición estricta e instalen únicamente software libre. Así podrá dar un claro ejemplo de ética irreprochable al rechazar el software que no es libre.
%
La fiesta de instalación debe asesorar a los usuarios que deseen remplazar ciertos componentes de sus máquinas por otros que sean compatibles con el software libre, e indicarles recursos comerciales o no comerciales útiles para obtener una computadora enteramente funcional sin paquetes binarios ni controladores que no sean libres.
David Parkman realizó una entrevista a Richard Stallman.
%
"GNU no es UNIX".
%
GNU es un acrónimo recursivo que significa "GNU no es UNIX". Esto es humor de programadores, pero tiene un significado serio, por supuesto.
%
GNU es el nombre del sistema operativo cuyo desarrollo lancé en enero de 1984, y decidí hacerlo similar, es decir, igual que UNIX, un sistema operativo ya existente. 
%
A diferencia de UNIX, lo especial de GNU es que se trat de software completamente libre.
%
GNU es un software que respetaba por completo la libertad.
%
Los usuarios tendrían control total sobre todo lo que contenía, mientras que con los sistemas propietarios - como UNIX, Windows, Mac OS o el software de estos dispositivos móviles - no se considera software libre.
%
Los usuarios no controlan el software no libre; una empresa de hecho controla esos programas, y los programas controlan a los usuarios.
%
Deberíamos controlar los programas que usamos, y no al revés.
%
Todo programa es libre o propietario. Si es libre, significa que los usuarios controlan el programa; controlan el programa por separado y lo controlan colectivamente, al mismo tiempo. Subyacen ambos tipos de control al unísono. Eso es software libre. 
%
Si los usuarios no controlan el programa, entonces el programa controla a los usuarios, y el propietario (normalmente una empresa) controla el programa.
%
Un programa propietario es un instrumento que le da al propietario poder sobre los usuarios. Es una herramienta para subyugar al Pueblo. Esa es la injusticia que intentamos erradicar.
%
El primer paso para escapar de la injusticia, es liberarnos nosotros mismos.
%
No uso software propietario. No lo toleraré en este ordenador.
%
Es posible comprar una computadora con software libre ya instalado.
%
Ni siquiera tienes que instalar el sistema GNU tú mismo. No hace falta ser un experto para usar software libre.
%
El software que no es libre es una injusticia.
%
Tenemos que deshacernos del software que no es libre.
%
Hoy en día los propietarios introducen intencionalmente funcionalidades maliciosas en su software propietario; empresas de las que has oído hablar - como Micro$oft, Appl€, Amazon, Adob€ - introducen funcionalidades maliciosas.
%
Los propietarios introducen puertas traseras en su software, lo que significa que pueden controlarlo remotamente, te guste o no.
%
Los propietarios introducen funciones de vigilancia en su software, que espían a los usuarios y envían información.
%
El software propietario a menudo cuenta con gestión de restricciones digitales (DRM), lo que significa que está diseñada para impedir que hagas lo que tu deseas con los datos que obtienes.
%
Todas las funcionalidades del software propietario son injusticias.
%
Los últimos procesadores de Intel están diseñados con una puerta trasera, lo que significa que pueden ser controlados remotamente por Intel o por cualquier gobierno que pueda obligar a Intel a cooperar, y desconocemos quiénes son esos gobiernos.
%
No debes confiar en los últimos procesadores de Intel, y si quieres más información, consulta stallman.org/intel.html.
%
No sabemos cómo solucionar el hardware malicioso; por ahora solo podemos usar procesadores más antiguos. 
%
Se están recaudando fondos para diseñar una nueva computadora que se fabricará específicamente para software libre. Tiene un procesador que no es de Intel ni de AMD (sus procesadores más nuevos tampoco son buenos).
%
Ahora puedes comprar un ordenador reacondicionado con solo software libre.
%
Si este proyecto consigue financiación y tiene éxito, podrás comprar un portátil nuevo diseñado para software libre.
%
Puedes hacer cómputo con diseños de hardware libres.
%
No puedes fabricar tu propio procesador.
%
Trazamos la línea entre el software que viene integrado y que los usuarios no van a cambiar, y el software en los niveles de instalación del sistema.
%
En un componente físico de hardware puede haber software integrado cuya presencia ni siquiera podemos detectar.
%
Cada teclado tiene software integrado. Cada disco tiene software integrado. El procesador puede tener software integrado... La cámara, de hecho lo tiene, cuenta con software integrado.
%
Probablemente taparía la cámara de mi computadora portátil con cinta aisladora.
%
Cuando he usado un portátil con cámara integrada, la he tapado con cinta aisladora.
%
Si el dispositivo tiene software libre, puedes asegurarte que no está activado.
%
No puedes confiar en el desarrollador de un programa propietario.
%
Ningún programa propietario ofrece seguridad alguna contra su propio propietario.
%
La única forma de tener seguridad contra quienes desarrollan el software es que tú tengas el control absoluto de tu cómputo.
%
Si se trata de software libre, no podemos obligar a los aceptar sin ver lo que hemos hecho.
%
Quienes contribuimos al software libre, no tenemos su control absoluto.
%
Todos los usuarios de software libre pueden ver lo que hemos hecho. Pueden comparar versiones. Pueden comprobarlo. Y si no les gusta, pueden modificarlo.
%
Los usuarios de software libre tienen el control absoluto. 
%
Los desarrolladores propietarios tienen el poder total sobre los usuarios del programa, lo saben y son completamente corruptos.
%
El poder de los desarrolladores propietarios corrompe.
%

Yo diría que introducir funcionalidades maliciosas en el software es corrupción.
%
Si quieren ver la historia completa sobre las funcionalidades maliciosas que conocemos, visiten GNU.org/proprietary; hay docenas de ejemplos, cada uno con una referencia en la prensa.
%
Cuando cubren tecnología, los medios de comunicación se financian con la publicidad de las mismas empresas tecnológicas. Y estas empresas no animan a los medios a considerar cuestiones éticas. ¿Cómo podrías confiar en ellos?
%
Si revisas las reseñas de productos de software, verás que no abordan la cuestión de la licencia del programa, que define hasta qué punto los usuarios lo controlan.
%
Una vez vi una reseña comparativa de un paquete de software GNU que escribí con varios programas propietarios similares, y la reseña solo consideraba aspectos prácticos. No consideró en absoluto la dimensión ética, ni la dimensión de la libertad.
%
En 1998, el movimiento del software libre se vio afectado por una campaña de cooptación diseñada para separar nuestro software de nuestra filosofía de libertad. Esa campaña se conoce como "código abierto".
%
La razón por la que se oye hablar tanto del término "código abierto" es que muchas empresas preferían que los medios hablaran de él precisamente porque eso no les causaba problemas.
%
Los medios no criticaron el software propietario... No lo calificaron de injusticia.
%
Las empresas apoyan con fuerza el uso del término superficial "código abierto" puesto que no pone foco sobre problemas éticos.
%
Las empresas han hablado tanto de nuestro trabajo en relación con su eslogan de "código abierto", que la mayoría de la gente piensa que eso es lo que defiendo.
%
Normalmente me niego a ir a cualquier evento que use el término "código abierto" porque no quiero alimentar errores.
%
En 1992, el sistema GNU estaba casi completo; faltaba un componente. Entonces el Sr. Torvalds lanzó un programa llamado Linux que lo completó, así que Linux llenó el último vacío en el sistema GNU.
%
Mucha gente se confundió y pensó que la combinación GNU con Linux era una solo componente llamado Linux. Cuando dicen que usan Linux, en realidad usan GNU con Linux.
%
Me niego a usar varias de esas compañías porque exigen que los usuarios se identifiquen.
%
No tomo Amtrak, tomo el autobús.
%
Pago en efectivo.
%
No muestro identificación.
%
Tengo una tarjeta de crédito que uso solo para aerolíneas, y si fuera a alquilar un coche. La razón de esas excepciones es que, de todas formas, te exigen identificarte, así que no conseguiría nada pagando en efectivo.
%
No deberías tener que identificarte para un vuelo nacional, pero no encuentro una alternativa a volar.
%
Está mal rastrear a la gente.
%
No hay ninguna razón para que la gente se identifique.
%
Mi principal razón por la que rechazo a Uber - al que también lo llamo Goober porque paga una miseria a los conductores - es que no diré quién soy.
%
Como Uber requiere que la gente use una aplicación de pago para reservar un viaje, no usaré la aplicación de pago y tampoco diré quién soy.
%
Uso un taxi normal. No tienes que decir quién eres para viajar con ellos.
%
A veces uso el buscador de Googl€, pero no me identifico. Me conecto a través de Tor y bloqueo el código Java$cript del sitio para que Googl€ no pueda rastrearme eficazmente.
%
Hay funciones en mi navegador que evitan el rastreo.
%
Participo en el boicot a Coca-Cola... Coca-Cola Company, no solo a Coca-Cola como producto, sino a todo lo que producen.
%
En muchos países es obligatorio beber agua embotellada por razones de salud, pero me aseguro de que no sea de Coca-Cola Company. No es que crea que su agua sea menos segura que cualquier otra agua embotellada, sino que participo en un boicot en su contra.
%
Existe una analogía correcta es entre una receta de cocina y un programa. Así como un programa produce un resultado, la receta produce un resultado que es comida, o una bebida.
%
No rechazo el resultado de los programas propietarios, lo que rechazo es ejecutar programas propietarios para mi cómputo.
%
No puedes darle a un cocinero humano una receta sin que la conozca. Para hacer una receta, tienes que conocer la receta. Tienes que saber cuál es. Eres consciente de lo que estás haciendo. Y no solo eso, verás que todos los cocineros comparten recetas cuando quieren.
%
Los cocineros tratan las recetas como libres por las mismas razones por las que deberías tener libertad para redistribuir el software que tienes. Deberías tener libertad para modificarlo, y los cocineros cambian las recetas. E incluso ocasionalmente anotan sus cambios en una copia de la receta y se la dan a un amigo. Son libres de hacerlo cuando quieran. No están necesariamente obligados a hacerlo.
%
Cada usuario de un programa debería tener libertad de ejecutar, estudiar y modificarlo según desee, hacer copias exactas y darlas o venderlas, y hacer copias modificadas y darlas o venderlas cuando quiera.
%
Libertad 0: Libertad para ejecutar el programa como quieras. 
%
Libertad 1: Libertad para estudiar el código fuente del programa y modificarlo para que funcione como desees.
%
Libertad 2: Libertad para hacer copias exactas del código del programa y dárselo o vendérselo a otros cuando quiera.
%
Libertad 3: Libertad para hacer copias de sus versiones modificadas del código fuente del programa y dárselas o vendérselas a otros cuando quieras.
%
Notarás que cuando los cocineros hacen eso con las recetas, asumen las mismas cuatro libertades con sus recetas.
%
Las recetas deberían ser libres.
%
Las recetas no distinguen entre código fuente y ejecutable. No hay recetas compiladas, porque las recetas las ejecutan seres humanos, no computadoras.
%
Si hubiera robots de cocina, alguien empezaría a vender —o quizás a regalar, es igual de malo— recetas propietarias, donde no se te permite saber los pasos y se te impide compartir la receta. Esto sería tan malo como un programa propietario, y yo lucharía contra ello de la misma manera.
%
Pero no me importa que algunos alimentos se hayan cocinado con una receta propietaria o privada, así como no rechazaría algo hecho por una computadora solo porque alguien más usara un programa propietario.
%
No boicoteo a las empresas porque usen Window$ internamente, simplemente siento lástima por ellas; son ellas las que están perdiendo la libertad si usan Window$, MacO$ o cualquier programa propietario.
%
Espero que te liberes. Mereces controlar tu propia informática.
%
Yo mismo rechazo el software que no es libre, y no induciré a nadie a usarlo porque entonces estaría induciendo a esa persona a perder la libertad. 
%
Hay algunas reuniones a las que me resulta difícil asistir, porque están organizadas de tal manera que tienes que usar Eventbrite para registrarte, y no puedo hablar con Eventbrite. Eso requiere código Java$cript que no es libre, y me niego a ejecutarlo.
%
Una empresa no tiene por qué saber quién va a una reunión.
%
No hago videollamadas a diario, pero sí tengo una forma de hacerlas con software libre.
%
Me niego rotundamente a usar $kype porque si lo hiciera estaría hablando con alguien que también lo usa. Y estoy presionando a alguien para que use $kype, y eso está mal.
%
Si usaras $kype solo, serías la víctima. Si lo hicieras de vez en cuando, no me avergonzaría. Pero si usas $kype con alguien y provocas que alguien más lo use, le estás haciendo algo malo.
%
No formes parte de la presión social que empuja a la gente a usar Skype. Realmente necesitas usarlo éticamente...
%
Es tu responsabilidad configurar GNU Jami para que no instes a otros a usar $kype.
%
Mi deber es decir "no", para que buscaras otra manera de hacer videollamadas. Para no ser cómplice de mantener a $kype en su posición de poder.
%
Abogo por el software libre y la privacidad.
%
La forma en que protegemos la privacidad de las personas es no recopilando datos personales. 
%
Una vez acumulados, los datos personales se pueden usar indebidamente.
%
Existen cuatro maneras en que la base de datos puede ser mal utilizada por la organización que la recopiló.
%
Es muy probable que la organización que recopiló datos personales intente usarla indebidamente (por ejemplo, vendiéndola a un intermediario de datos o maltratando a las personas).
%
Los datos personales pueden ser mal utilizados por empleados deshonestos de la organización que los recopilaron, como ocurrió con Uber, por cierto.
%
Es muy común que los datos personales sean mal utilizada por ladrones, crackers que rompen la seguridad de la organización que los recopilaron.
%
Los datos personales pueden ser mal utilizados por el Gran Hermano. El estado de vigilancia, que inclinará a maltratar a las personas por intereses privados.
%
Tenemos que negarnos a recopilar datos personales para usarlos.
%
Tenemos que organizarnos y decir: "Que no recopilen datos personales".
%
Tengo una tarjeta Charlie que uso para pagar el metro y el autobús. Solo cargo dinero en efectivo, y de vez en cuando consigo una nueva, así que la vigilancia efectiva que pueden hacer con ella es limitada.
%
Necesitamos leyes que no permita la realización de reconocimiento facial.
%
Nadie debería poder hacer reconocimiento facial sistemático con cámaras apuntando a lugares públicos, excepto bajo una orden judicial específica que identifique un lugar en particular, en un período de tiempo determinado.
%
Necesitamos leyes que detengan la recopilación de datos, lo que constituye una amenaza para disidentes y denunciantes.
%
La democracia necesita denunciantes, héroes como Snowden. Porque nos dicen lo que el gobierno realmente está haciendo.
%
Snowden es un héroe.
%
Chelsea Manning es una heroína.
%
La NSA estaba tomando el pelo al tribunal FISA. El tribunal FISA no podía supervisar eficazmente lo que hacían la NSA y el FBI.
%
La justicia va más allá de obedecer las leyes.
%
Necesitamos saber qué nos está haciendo el estado, y Snowden nos lo contó.
%
Snowden es un gran héroe.
%
Snowden merece una medalla y ser puesto a cargo de la NSA.
%
Cuando se libra una guerra contra los denunciantes ¿cómo se puede tener denunciantes? ¿Cómo pueden estar seguros si el gobierno siempre sabe quién va a dónde y quién habla con quién?
%
Es muy difícil ser un denunciante. Por lo tanto, es difícil tener democracia.
%
Si no sabemos qué hace el gobierno, no podemos decidir qué debería hacer.
%
La cantidad de vigilancia que tenemos ahora en los Estados Unidos y en muchos otros países pone en peligro la democracia.
%
Actualmente tenemos más vigilancia que la que existía en la antigua Unión Soviética.
%
Debemos reducir el nivel de vigilancia hasta el punto en que los denunciantes y los disidentes estén seguros. 
%
La razón por la que no tengo teléfono móvil es que siempre que están encendidos, es posible así rastrear sus movimientos, y todos los teléfonos móviles (con algunas excepciones) tienen una puerta trasera universal que se puede activar remotamente para convertirlos en un dispositivo de escucha permanente.
%
Los teléfonos móviles escuchan constantemente y transmiten todas las conversaciones a través de la red telefónica a quien sea.
%
Una vez que se activan remotamente los teléfonos móviles, tampoco se puede apagar. Finge que se apaga, pero en realidad sigue funcionando.
%
Llamo a los teléfonos móviles "El sueño de Stalin".
%
Consideré comprarme un teléfono móviul, pero cuando descubrí las amenazas de vigilancia que significan, decidí que es mi deber como ciudadano no tolerarlos, así que no tengo uno.
%
No tengo uno teléfono móvil. Uso muchos teléfonos móviles diferentes. Muchos de ellos solo una vez. Me refiero a que uso el teléfono móvil de otra persona.
%
Evito usar teléfonos móviles, y digo: "¿Podrías hacer una llamada o enviar un mensaje por mí?". Así, el Gran Hermano no suele saber que soy yo. La cuestión es que...
%
Cualquiera puede rastrearte con un teléfono móvil, porque hay fallos en el protocolo de comunicación entre sistemas de telefonía móvil, que se llama "Sistema de Señalización 7".
%
Cualquier puede fingir ser otra red de telefonía móvil y hablar con su teléfono móvil y preguntarle: "¿Dónde ha estado este teléfono durante los últimos seis meses, un año o lo que sea?", "¿Qué llamadas ha hecho y recibido? ¿Qué mensajes ha recibido? ¿Cuál era el contenido de esos mensajes?".
%
Mucha información personal en su teléfono móvil está disponible para cualquiera que esté dispuesto a - quizás - infringir alguna ley impersonando, así como para el Gran Hermano que no tiene por qué infringirla; probablemente recopila todos esos datos masivamente cada semana, o cada día, o cada cinco minutos.
%
Existe una vigilancia tan extrema que la mayoría de la gente no la imagina.
%
Si queremos recuperar la democracia, tenemos que detener la vigilancia extrema.
